import LessonPage from "@/components/lessons/LessonPage";

export default function ControlFlujoBuclesLesson() {
  const steps = [
    {
      title: "¬øQu√© es el control de flujo en bucles?",
      content:
        "El control de flujo nos permite modificar el comportamiento normal de los bucles. En lugar de simplemente repetir c√≥digo hasta que la condici√≥n sea falsa, podemos saltar iteraciones espec√≠ficas o terminar el bucle antes de tiempo. Son como atajos o interrupciones que nos dan m√°s control sobre c√≥mo se ejecutan nuestros bucles, permiti√©ndonos manejar casos especiales de forma elegante.",
      code: `// Bucle normal
variable i = 1
mientras i <= 5 {
    mostrar "N√∫mero: " + i
    i = i + 1
}

mostrar "Bucle completado normalmente"`,
      explanation:
        "Este es un bucle normal que se ejecuta de principio a fin. Muestra los n√∫meros del 1 al 5 y termina cuando i llega a 6. En este caso, el bucle completa todas sus iteraciones seg√∫n la condici√≥n. Sin embargo, a veces necesitamos:\n\n‚Ä¢ Terminar el bucle antes si encontramos lo que buscamos\n‚Ä¢ Saltar ciertas iteraciones que no necesitamos procesar\n‚Ä¢ Manejar casos especiales sin complicar la l√≥gica\n\nPara estos casos, HispanoLang nos proporciona dos palabras clave especiales: `romper` y `continuar`. Estas herramientas hacen nuestros bucles m√°s flexibles y eficientes.",
      challenge:
        "Crea un bucle `mientras` que cuente del 1 al 10 y muestre cada n√∫mero. Observa c√≥mo funciona normalmente antes de aprender a modificar su flujo.",
    },
    {
      title: "Romper: Salir del Bucle",
      content:
        "La palabra clave `romper` termina el bucle inmediatamente, sin importar si la condici√≥n a√∫n es verdadera. Es como una salida de emergencia: cuando encuentras lo que buscas o se cumple cierta condici√≥n, puedes detener el bucle sin esperar a que termine naturalmente. Esto ahorra tiempo y hace el c√≥digo m√°s eficiente.",
      code: `variable contador = 0

mientras contador < 10 {
    mostrar contador
    contador = contador + 1
    
    si contador == 3 {
        romper
    }
}

mostrar "Bucle terminado con romper"
mostrar "Contador final: " + contador`,
      explanation:
        "La palabra `romper` termina el bucle inmediatamente. En este ejemplo:\n\n1. contador = 0, mostramos 0, incrementamos a 1\n2. contador = 1, mostramos 1, incrementamos a 2\n3. contador = 2, mostramos 2, incrementamos a 3\n4. contador = 3, la condici√≥n del `si` es verdadera, ejecutamos `romper`\n5. El bucle termina inmediatamente\n\nObserva que aunque la condici√≥n del `mientras` dice `< 10`, el bucle termina cuando contador = 3. El c√≥digo despu√©s de `romper` dentro del bucle no se ejecuta. `romper` es √∫til para:\n\n‚Ä¢ B√∫squedas: Terminar cuando encuentras el elemento\n‚Ä¢ Validaciones: Salir si detectas un problema\n‚Ä¢ Optimizaci√≥n: No procesar m√°s de lo necesario",
      challenge:
        "Crea un bucle que busque el n√∫mero 7 en una secuencia del 1 al 20. Usa `romper` para terminar el bucle cuando lo encuentres y muestra un mensaje de √©xito.",
    },
    {
      title: "Continuar: Saltar a la Siguiente Iteraci√≥n",
      content:
        "La palabra clave `continuar` salta el resto de la iteraci√≥n actual y va directamente a la siguiente. Es como decir 'skip this one': no queremos terminar el bucle completamente, solo queremos saltarnos ciertos elementos que no necesitamos procesar. Esto es √∫til para filtrar o ignorar casos espec√≠ficos.",
      code: `variable i = 0

mientras i < 5 {
    i = i + 1
    
    si i == 3 {
        continuar
    }
    
    mostrar i
}

mostrar "Bucle terminado"`,
      explanation:
        "La palabra `continuar` salta al inicio de la siguiente iteraci√≥n. En este ejemplo:\n\n1. i = 1, no es 3, mostramos 1\n2. i = 2, no es 3, mostramos 2\n3. i = 3, es 3, ejecutamos `continuar` y saltamos el `mostrar`\n4. i = 4, no es 3, mostramos 4\n5. i = 5, no es 3, mostramos 5\n\nResultado: se muestran 1, 2, 4, 5 (falta el 3). El c√≥digo despu√©s de `continuar` en esa iteraci√≥n no se ejecuta, pero el bucle contin√∫a con la siguiente iteraci√≥n. `continuar` es √∫til para:\n\n‚Ä¢ Filtrar elementos que no cumplen condiciones\n‚Ä¢ Saltar casos especiales\n‚Ä¢ Procesar solo elementos que nos interesan\n‚Ä¢ Evitar c√≥digo anidado complejo",
      challenge:
        "Usa un bucle del 1 al 10. Usa `continuar` para saltar los n√∫meros pares (usa el operador % para detectarlos). Muestra solo los n√∫meros impares.",
    },
    {
      title: "Romper vs Continuar: Diferencias Clave",
      content:
        "Es importante entender la diferencia entre `romper` y `continuar`. `romper` termina el bucle completamente y contin√∫a con el c√≥digo despu√©s del bucle. `continuar` solo salta la iteraci√≥n actual y contin√∫a con la siguiente iteraci√≥n del bucle. Ambos son √∫tiles en diferentes situaciones.",
      code: `// Ejemplo con romper
mostrar "Bucle con ROMPER:"
para (variable i = 1; i <= 5; i = i + 1) {
    si i == 3 {
        romper
    }
    mostrar i
}

mostrar "---"

// Ejemplo con continuar
mostrar "Bucle con CONTINUAR:"
para (variable j = 1; j <= 5; j = j + 1) {
    si j == 3 {
        continuar
    }
    mostrar j
}`,
      explanation:
        "Comparemos los resultados:\n\n**Con `romper`**: Muestra 1, 2 y termina (cuando i=3, sale del bucle)\n**Con `continuar`**: Muestra 1, 2, 4, 5 (cuando j=3, salta esa iteraci√≥n pero contin√∫a)\n\nCu√°ndo usar cada uno:\n\n‚Ä¢ **romper**: Cuando encontraste lo que buscabas o se cumpli√≥ una condici√≥n para terminar\n‚Ä¢ **continuar**: Cuando quieres ignorar ciertos elementos pero seguir procesando el resto\n\nUn error com√∫n es confundirlos: si usas `romper` cuando quer√≠as `continuar`, terminar√°s el bucle prematuramente. Si usas `continuar` cuando quer√≠as `romper`, el bucle seguir√° ejecut√°ndose cuando no deber√≠a. Entender esta diferencia es crucial para controlar bucles efectivamente.",
      challenge:
        "Crea dos bucles del 1 al 10. En el primero, usa `romper` cuando llegues a 6. En el segundo, usa `continuar` para saltar el 6. Compara los resultados y entiende la diferencia.",
    },
    {
      title: "Casos de Uso Pr√°cticos",
      content:
        "En programaci√≥n real, `romper` y `continuar` tienen aplicaciones muy √∫tiles. `romper` es com√∫n en b√∫squedas (terminar cuando encuentras), validaciones (salir si hay error), o l√≠mites (procesar m√°ximo N elementos). `continuar` es √∫til para filtrar (procesar solo elementos v√°lidos), saltar casos especiales, o evitar procesamiento innecesario.",
      code: `// Buscar en una lista
variable nombres = ["Ana", "Carlos", "Mar√≠a", "Juan"]
variable buscando = "Mar√≠a"
variable encontrado = falso

para (variable i = 0; i < nombres.longitud(); i = i + 1) {
    si nombres[i] == buscando {
        mostrar "¬°Encontrado en posici√≥n " + i + "!"
        encontrado = verdadero
        romper
    }
}

si !encontrado {
    mostrar "No se encontr√≥"
}

mostrar "---"

// Filtrar n√∫meros negativos
variable numeros = [5, -2, 8, -1, 3, -7, 10]
mostrar "N√∫meros positivos:"

para (variable i = 0; i < numeros.longitud(); i = i + 1) {
    si numeros[i] < 0 {
        continuar
    }
    mostrar numeros[i]
}`,
      explanation:
        "Estos son casos de uso reales:\n\n**B√∫squeda con `romper`**: Una vez que encontramos a 'Mar√≠a', no tiene sentido seguir buscando. Usamos `romper` para terminar el bucle inmediatamente, ahorrando iteraciones innecesarias.\n\n**Filtrado con `continuar`**: Solo queremos procesar n√∫meros positivos. Cuando encontramos un n√∫mero negativo, usamos `continuar` para saltarlo sin procesarlo, pero seguimos con el resto de la lista.\n\nEstos patrones son muy comunes:\n‚Ä¢ B√∫squeda en bases de datos (romper al encontrar)\n‚Ä¢ Validaci√≥n de listas (romper si hay error)\n‚Ä¢ Filtrado de datos (continuar si no cumple criterios)\n‚Ä¢ Procesamiento selectivo (continuar para casos especiales)",
      challenge:
        "Crea una lista de edades. Usa un bucle con `continuar` para mostrar solo las edades >= 18 (mayores de edad). Luego crea otro bucle que busque si hay alguien mayor de 65 y use `romper` al encontrarlo.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de usar control de flujo avanzado en bucles. Combina `romper` y `continuar` con todo lo que has aprendido para crear bucles eficientes e inteligentes. Estas herramientas son fundamentales para optimizar c√≥digo y manejar l√≥gica compleja de forma clara.",
      code: `// B√∫squeda con validaci√≥n
variable numeros = [2, 4, 6, 7, 8, 10]

mostrar "Buscando el primer n√∫mero impar:"
para (variable i = 0; i < numeros.longitud(); i = i + 1) {
    si numeros[i] % 2 == 0 {
        continuar
    }
    
    mostrar "Primer impar: " + numeros[i]
    romper
}`,
      explanation:
        "En esta pr√°ctica libre, combina `romper` y `continuar` para crear bucles sofisticados. El ejemplo muestra un patr√≥n poderoso: usar `continuar` para filtrar elementos que no nos interesan y `romper` para terminar cuando encontramos lo que buscamos. Esto es m√°s eficiente que procesar toda la lista. Intenta crear:\n\n‚Ä¢ Buscadores que terminen al encontrar\n‚Ä¢ Filtros que procesen solo elementos v√°lidos\n‚Ä¢ Validadores que salgan al primer error\n‚Ä¢ Procesadores que manejen casos especiales\n\nRecuerda: `romper` y `continuar` hacen tu c√≥digo m√°s eficiente, pero √∫salos con claridad. El c√≥digo debe seguir siendo f√°cil de entender. A veces un bucle simple es mejor que uno lleno de `romper` y `continuar`.",
      challenge:
        "Crea una lista de 15 n√∫meros. Busca el primer n√∫mero que sea m√∫ltiplo de 3 Y mayor que 10. Usa `continuar` para saltar los que no cumplen y `romper` cuando lo encuentres. Muestra cu√°ntas iteraciones hiciste.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ `romper` termina el bucle completamente.\n‚Ä¢ `continuar` salta a la siguiente iteraci√≥n.\n‚Ä¢ `romper` se usa para salir temprano cuando encontramos lo que buscamos.\n‚Ä¢ `continuar` se usa para saltar elementos que no nos interesan.\n‚Ä¢ Ambos hacen bucles m√°s eficientes y expresivos.\n‚Ä¢ √ösalos con claridad para mantener el c√≥digo legible.\n‚Ä¢ ¬°El control de flujo avanzado optimiza tus programas!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "üîÄ", text: "Lecci√≥n 8" }}
      title="Control de Flujo en Bucles en"
      titleGradient=" HispanoLang"
      description="Aprende a usar romper y continuar para controlar bucles avanzadamente"
      steps={steps}
      prevLessonUrl="/lecciones/bucles"
      prevLessonTitle="Bucles"
      nextLessonUrl="/lecciones/funciones"
      nextLessonTitle="Funciones"
    />
  );
}
