import LessonPage from "@/components/lessons/LessonPage";

export default function ListasLesson() {
  const steps = [
    {
      title: "¬øQu√© son las listas?",
      content:
        "Las listas (tambi√©n llamadas arrays) son estructuras que nos permiten almacenar m√∫ltiples valores en una sola variable. En lugar de crear una variable por cada elemento, podemos agruparlos todos en una lista. Es como tener una caja con compartimentos numerados: cada compartimento guarda un valor y podemos acceder a √©l por su posici√≥n. Las listas son fundamentales para trabajar con colecciones de datos.",
      code: `variable numeros = [1, 2, 3, 4, 5]
variable frutas = ["manzana", "banana", "naranja"]
variable mixto = [1, "hola", verdadero, 3.14]

mostrar numeros
mostrar frutas
mostrar mixto`,
      explanation:
        "Las listas se crean usando corchetes [] y separando los elementos con comas. Podemos crear listas de cualquier tipo: n√∫meros, texto, booleanos, o incluso mezclar diferentes tipos en la misma lista (como en `mixto`). Cada elemento en la lista tiene una posici√≥n, empezando desde 0. Las listas son din√°micas: pueden crecer o reducirse durante la ejecuci√≥n del programa. Son perfectas para almacenar colecciones como nombres de estudiantes, calificaciones, productos en un carrito, o cualquier grupo de datos relacionados.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea tres listas diferentes: una con tus 5 n√∫meros favoritos, otra con los nombres de 3 amigos, y una mixta con tu nombre, edad y ciudad. Mu√©stralas todas.",
    },
    {
      title: "Acceder a Elementos de una Lista",
      content:
        "Cada elemento en una lista tiene un √≠ndice (posici√≥n) que empieza desde 0. Podemos acceder a cualquier elemento usando corchetes y el n√∫mero de √≠ndice. El primer elemento est√° en la posici√≥n 0, el segundo en la 1, y as√≠ sucesivamente. Tambi√©n podemos modificar elementos accediendo a su √≠ndice y asign√°ndole un nuevo valor.",
      code: `variable frutas = ["manzana", "banana", "naranja", "uva"]

mostrar "Primera fruta: " + frutas[0]
mostrar "Segunda fruta: " + frutas[1]
mostrar "Tercera fruta: " + frutas[2]

// Modificar un elemento
frutas[1] = "pera"
mostrar "Lista modificada: " + frutas
mostrar "Nueva segunda fruta: " + frutas[1]`,
      explanation:
        "Los √≠ndices en las listas empiezan desde 0, no desde 1. Esto puede ser confuso al principio, pero es un est√°ndar en programaci√≥n. En una lista de 4 elementos, los √≠ndices son 0, 1, 2, 3. Para acceder a un elemento usamos la sintaxis `lista[indice]`. Para modificar un elemento, usamos la misma sintaxis pero con asignaci√≥n: `lista[indice] = nuevoValor`. Es importante no intentar acceder a un √≠ndice que no existe (como frutas[10] en una lista de 4 elementos), ya que causar√° un error. El acceso por √≠ndice es muy r√°pido y eficiente, lo que hace a las listas ideales para almacenar y recuperar datos.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista de 5 calificaciones. Muestra la primera y √∫ltima nota. Luego cambia la tercera nota a 10 y muestra la lista completa.",
    },
    {
      title: "M√©todos B√°sicos de Listas",
      content:
        "Las listas vienen con m√©todos √∫tiles que nos facilitan trabajar con ellas. Podemos obtener su longitud, acceder al primer o √∫ltimo elemento, y m√°s. Estos m√©todos nos ahorran tener que recordar √≠ndices espec√≠ficos y hacen el c√≥digo m√°s legible y expresivo.",
      code: `variable numeros = [10, 20, 30, 40, 50]

mostrar "Longitud: " + numeros.longitud()
mostrar "Primer elemento: " + numeros.primero()
mostrar "√öltimo elemento: " + numeros.ultimo()

variable frutas = ["manzana", "banana"]
mostrar "Cantidad de frutas: " + frutas.longitud()`,
      explanation:
        "Los m√©todos b√°sicos de listas son:\n\n‚Ä¢ `.longitud()` retorna cu√°ntos elementos hay en la lista\n‚Ä¢ `.primero()` retorna el primer elemento (equivalente a lista[0])\n‚Ä¢ `.ultimo()` retorna el √∫ltimo elemento\n\nEstos m√©todos hacen el c√≥digo m√°s legible. En lugar de escribir `numeros[numeros.longitud() - 1]` para obtener el √∫ltimo elemento, simplemente usamos `numeros.ultimo()`. Los par√©ntesis despu√©s del nombre del m√©todo son importantes: indican que estamos llamando a un m√©todo. Estos m√©todos no modifican la lista original, solo retornan informaci√≥n sobre ella.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista con los d√≠as de la semana (al menos 5). Usa los m√©todos para mostrar cu√°ntos d√≠as hay, el primer d√≠a y el √∫ltimo d√≠a de tu lista.",
    },
    {
      title: "Agregar y Remover Elementos",
      content:
        "Las listas son din√°micas: podemos agregar nuevos elementos o quitar elementos existentes. Esto es muy √∫til cuando trabajamos con datos que cambian durante la ejecuci√≥n del programa, como una lista de tareas pendientes, un carrito de compras, o un inventario.",
      code: `variable frutas = ["manzana", "banana"]

mostrar "Lista inicial: " + frutas
mostrar "Cantidad: " + frutas.longitud()

// Agregar elementos
frutas.agregar("naranja")
mostrar "Despu√©s de agregar: " + frutas

frutas.agregar("uva", "pera")
mostrar "Agregando varias: " + frutas
mostrar "Nueva cantidad: " + frutas.longitud()

// Remover elemento
variable eliminada = frutas.remover()
mostrar "Elemento eliminado: " + eliminada
mostrar "Lista final: " + frutas`,
      explanation:
        "Los m√©todos para modificar listas son:\n\n‚Ä¢ `.agregar(elemento)` a√±ade un elemento al final de la lista\n‚Ä¢ `.agregar(elem1, elem2, ...)` a√±ade m√∫ltiples elementos\n‚Ä¢ `.remover()` elimina y retorna el √∫ltimo elemento\n\nEstos m√©todos modifican la lista original. Cuando usamos `.agregar('naranja')`, la lista crece en tama√±o. Cuando usamos `.remover()`, la lista se reduce y el m√©todo nos devuelve el elemento eliminado (√∫til si queremos hacer algo con √©l antes de descartarlo). Es importante entender que `.remover()` elimina solo el √∫ltimo elemento. M√°s adelante aprender√°s m√©todos para eliminar elementos en posiciones espec√≠ficas.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista vac√≠a `tareas = []`. Agrega 4 tareas diferentes. Muestra cu√°ntas tareas tienes. Luego completa (remueve) 2 tareas y muestra la lista final.",
    },
    {
      title: "Verificar Contenido de Listas",
      content:
        "A menudo necesitamos saber si una lista contiene un elemento espec√≠fico. El m√©todo `.contiene()` nos permite verificar esto sin tener que recorrer manualmente toda la lista. Retorna verdadero si el elemento existe en la lista, o falso si no existe. Esto es muy √∫til para validaciones y b√∫squedas.",
      code: `variable frutas = ["manzana", "banana", "naranja", "uva"]

variable tieneBanana = frutas.contiene("banana")
mostrar "¬øTiene banana?: " + tieneBanana

variable tieneFresa = frutas.contiene("fresa")
mostrar "¬øTiene fresa?: " + tieneFresa

si frutas.contiene("manzana") {
    mostrar "¬°S√≠ tenemos manzanas!"
} sino {
    mostrar "No hay manzanas disponibles"
}`,
      explanation:
        "El m√©todo `.contiene(elemento)` busca el elemento en toda la lista y retorna un valor booleano (verdadero/falso). Esto es muy √∫til para:\n\n‚Ä¢ Validar si un usuario est√° en una lista de permitidos\n‚Ä¢ Verificar si un producto est√° en stock\n‚Ä¢ Comprobar si una opci√≥n es v√°lida\n‚Ä¢ Evitar duplicados antes de agregar elementos\n\nEl m√©todo hace la b√∫squeda autom√°ticamente, sin necesidad de escribir un bucle. Simplemente le pasamos el valor que queremos buscar y nos dice si existe o no. Podemos usar el resultado directamente en condicionales, como en el ejemplo donde verificamos si hay manzanas antes de mostrar un mensaje.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista de 5 colores. Pide al usuario un color y usa `.contiene()` para verificar si ese color est√° en tu lista. Muestra un mensaje apropiado seg√∫n el resultado.",
    },
    {
      title: "Recorrer Listas",
      content:
        "Recorrer una lista significa visitar cada elemento uno por uno para procesarlo. Podemos usar el m√©todo `.recorrer()` con una funci√≥n que se ejecutar√° para cada elemento. Esto es m√°s elegante que usar un bucle manual y hace el c√≥digo m√°s expresivo y f√°cil de leer.",
      code: `variable frutas = ["manzana", "banana", "naranja"]

// Recorrer lista simple
frutas.recorrer(funcion(elemento) {
    mostrar "Fruta: " + elemento
})

mostrar "---"

// Recorrer con √≠ndice
variable numeros = [10, 20, 30, 40]
numeros.recorrer(funcion(elemento, indice) {
    mostrar "Posici√≥n " + indice + ": " + elemento
})`,
      explanation:
        "El m√©todo `.recorrer()` acepta una funci√≥n que se ejecutar√° para cada elemento de la lista. Podemos recibir uno o dos par√°metros en esa funci√≥n:\n\n‚Ä¢ **Un par√°metro** (elemento): Recibe el valor de cada elemento\n‚Ä¢ **Dos par√°metros** (elemento, indice): Recibe el valor y su posici√≥n\n\nEsto es muy poderoso porque nos permite procesar cada elemento sin preocuparnos por manejar el √≠ndice manualmente. La funci√≥n se ejecuta autom√°ticamente para cada elemento en orden. Podemos usar este m√©todo para sumar todos los elementos, buscar valores espec√≠ficos, transformar datos, o mostrar informaci√≥n formateada. Es especialmente √∫til cuando combinamos listas con funciones para crear c√≥digo modular y expresivo.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista de precios [10, 25, 30, 15, 40]. Usa `.recorrer()` para calcular y mostrar cada precio con IVA (precio * 1.21). Al final, muestra el total.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear programas que trabajen con listas de datos. Las listas son una de las estructuras de datos m√°s importantes en programaci√≥n: te permiten organizar, procesar y manipular colecciones de informaci√≥n de forma eficiente. Combina todo lo que has aprendido para crear programas √∫tiles y pr√°cticos.",
      code: `variable estudiantes = ["Ana", "Carlos", "Mar√≠a"]
variable notas = [85, 92, 78]

mostrar "Lista de estudiantes:"
estudiantes.recorrer(funcion(nombre, indice) {
    mostrar nombre + ": " + notas[indice] + " puntos"
})`,
      explanation:
        "En esta pr√°ctica libre, experimenta con listas de diferentes formas. Intenta crear listas que representen datos del mundo real, combina listas relacionadas (como estudiantes y sus notas), usa m√©todos para agregar y quitar elementos din√°micamente, y recorre listas para procesar informaci√≥n. Las listas son especialmente √∫tiles cuando combinas lo que has aprendido: usa bucles para procesarlas, condicionales para filtrar elementos, funciones para encapsular operaciones, y m√©todos de lista para simplificar tareas comunes. Piensa en las listas como contenedores organizados que facilitan el manejo de m√∫ltiples datos relacionados.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un sistema de inventario: una lista de productos y otra de cantidades. Agrega 3 productos, muestra el inventario completo, verifica si tienes un producto espec√≠fico, y calcula cu√°ntos productos tienes en total.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ Las listas almacenan m√∫ltiples valores en una sola variable.\n‚Ä¢ Los √≠ndices empiezan desde 0, no desde 1.\n‚Ä¢ Usa `.longitud()`, `.primero()` y `.ultimo()` para acceder a informaci√≥n.\n‚Ä¢ `.agregar()` a√±ade elementos, `.remover()` quita el √∫ltimo.\n‚Ä¢ `.contiene()` verifica si un elemento existe.\n‚Ä¢ `.recorrer()` procesa cada elemento con una funci√≥n.\n‚Ä¢ ¬°Las listas son esenciales para trabajar con colecciones de datos!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "üìã", text: "Lecci√≥n 8" }}
      title="Listas en"
      titleGradient=" Hispano Lang"
      description="Aprende a trabajar con colecciones de datos usando listas"
      steps={steps}
      prevLessonUrl="/lecciones/funciones"
      prevLessonTitle="Funciones"
      nextLessonUrl="/lecciones/objetos"
      nextLessonTitle="Objetos"
    />
  );
}
