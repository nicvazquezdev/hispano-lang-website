import LessonPage from "@/components/lessons/LessonPage";

export default function FuncionesLesson() {
  const steps = [
    {
      title: "¬øQu√© son las funciones?",
      content:
        "Las funciones son bloques de c√≥digo reutilizables que realizan una tarea espec√≠fica. En lugar de escribir el mismo c√≥digo una y otra vez, podemos crear una funci√≥n y llamarla cuando la necesitemos. Es como crear tus propias herramientas personalizadas: defines una vez c√≥mo funciona algo, y luego lo usas tantas veces como quieras. Las funciones son fundamentales para organizar c√≥digo, evitar repetici√≥n y crear programas m√°s mantenibles.",
      code: `funcion saludar() {
    mostrar "¬°Hola mundo!"
    mostrar "Bienvenido a HispanoLang"
}

saludar()
mostrar "---"
saludar()`,
      explanation:
        "Aqu√≠ creamos nuestra primera funci√≥n llamada `saludar`. La definici√≥n de la funci√≥n (entre llaves) contiene el c√≥digo que queremos reutilizar. Para usar la funci√≥n, simplemente escribimos su nombre seguido de par√©ntesis: `saludar()`. Esto se llama 'llamar' o 'invocar' la funci√≥n. En este ejemplo, llamamos a `saludar()` dos veces, y cada vez se ejecuta todo el c√≥digo dentro de la funci√≥n. Las funciones nos permiten abstraer comportamientos complejos en nombres simples y descriptivos.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una funci√≥n llamada `despedirse` que muestre dos mensajes de despedida. Luego ll√°mala 3 veces para ver c√≥mo se reutiliza el c√≥digo.",
    },
    {
      title: "Funciones con Par√°metros",
      content:
        "Los par√°metros son valores que le pasamos a una funci√≥n para que trabaje con ellos. Es como darle ingredientes a una receta: la receta (funci√≥n) siempre es la misma, pero los ingredientes (par√°metros) pueden cambiar, produciendo resultados diferentes. Esto hace que las funciones sean mucho m√°s flexibles y poderosas.",
      code: `funcion saludar(nombre) {
    mostrar "¬°Hola " + nombre + "!"
}

saludar("Mar√≠a")
saludar("Carlos")
saludar("Ana")

funcion presentar(nombre, edad) {
    mostrar nombre + " tiene " + edad + " a√±os"
}

presentar("Juan", 25)
presentar("Laura", 30)`,
      explanation:
        "Los par√°metros se definen entre los par√©ntesis de la funci√≥n. Cuando llamamos a la funci√≥n, debemos pasar valores (argumentos) que correspondan a esos par√°metros. En `saludar(nombre)`, `nombre` es el par√°metro, y cuando llamamos `saludar('Mar√≠a')`, 'Mar√≠a' es el argumento que se asigna a ese par√°metro. Podemos tener m√∫ltiples par√°metros separados por comas, como en `presentar(nombre, edad)`. Los par√°metros funcionan como variables locales: solo existen dentro de la funci√≥n y toman los valores que les pasamos al llamarla.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una funci√≥n `calcularAreaRectangulo(base, altura)` que muestre el √°rea calculada. Ll√°mala con diferentes valores de base y altura.",
    },
    {
      title: "Funciones que Retornan Valores",
      content:
        "Adem√°s de ejecutar c√≥digo, las funciones pueden devolver (retornar) un valor usando la palabra `retornar`. Esto nos permite usar el resultado de la funci√≥n en otras partes del programa. Es como una calculadora: le das n√∫meros, hace el c√°lculo, y te devuelve el resultado. El valor retornado puede guardarse en una variable o usarse directamente en expresiones.",
      code: `funcion sumar(a, b) {
    retornar a + b
}

variable resultado = sumar(5, 3)
mostrar "5 + 3 = " + resultado

variable total = sumar(10, 20) + sumar(5, 15)
mostrar "Total: " + total

funcion esMayorDeEdad(edad) {
    retornar edad >= 18
}

mostrar "¬øEs mayor de edad?: " + esMayorDeEdad(20)`,
      explanation:
        "La palabra clave `retornar` hace dos cosas: devuelve un valor y termina la ejecuci√≥n de la funci√≥n inmediatamente. Todo el c√≥digo despu√©s de `retornar` no se ejecuta. En `sumar(5, 3)`, la funci√≥n calcula 5 + 3 y retorna 8, que se guarda en la variable `resultado`. Podemos usar el valor retornado directamente en expresiones como `sumar(10, 20) + sumar(5, 15)`. Las funciones pueden retornar cualquier tipo de dato: n√∫meros, texto, booleanos, etc. Las funciones con retorno son como transformadores de datos: reciben informaci√≥n, la procesan, y devuelven el resultado.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una funci√≥n `multiplicar(x, y)` que retorne el producto. Usa esta funci√≥n para calcular el √°rea de 3 rect√°ngulos diferentes y muestra la suma total de todas las √°reas.",
    },
    {
      title: "Funciones sin Retorno vs con Retorno",
      content:
        "Las funciones pueden hacer dos tipos de tareas: realizar acciones (como mostrar mensajes) o calcular y retornar valores. Entender la diferencia es clave: las funciones sin retorno ejecutan efectos secundarios (mostrar, modificar variables globales), mientras que las funciones con retorno producen valores que podemos usar. Ambos tipos son √∫tiles en diferentes situaciones.",
      code: `// Funci√≥n sin retorno (solo ejecuta acciones)
funcion imprimirTabla(numero) {
    para (variable i = 1; i <= 5; i = i + 1) {
        mostrar numero + " x " + i + " = " + (numero * i)
    }
}

imprimirTabla(3)

mostrar "---"

// Funci√≥n con retorno (calcula y devuelve)
funcion calcularPromedio(a, b, c) {
    variable suma = a + b + c
    retornar suma / 3
}

variable nota1 = 8
variable nota2 = 9
variable nota3 = 7
variable promedio = calcularPromedio(nota1, nota2, nota3)
mostrar "Promedio: " + promedio`,
      explanation:
        "Las funciones sin `retornar` son √∫tiles cuando queremos ejecutar acciones como mostrar informaci√≥n, dibujar en pantalla, o modificar el estado del programa. La funci√≥n `imprimirTabla` no devuelve nada, solo muestra la tabla de multiplicar. Por otro lado, `calcularPromedio` realiza un c√°lculo y retorna el resultado para que podamos usarlo. Una buena pr√°ctica es que las funciones con retorno no tengan efectos secundarios (no usen `mostrar` internamente), y las funciones sin retorno se enfoquen en acciones. Esto hace el c√≥digo m√°s predecible y f√°cil de probar.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una funci√≥n sin retorno `mostrarEstadisticas(nombre, puntos)` que muestre el nombre y puntos formateados. Luego crea una funci√≥n con retorno `calcularPuntosFinales(puntos, bonus)` que sume y retorne el total.",
    },
    {
      title: "Funciones An√≥nimas",
      content:
        "Las funciones an√≥nimas son funciones sin nombre que se guardan en variables. Son √∫tiles cuando necesitamos una funci√≥n peque√±a y espec√≠fica que solo se usar√° en un lugar. Es como crear una herramienta temporal: la defines, la usas, y no necesitas darle un nombre formal porque no la reutilizar√°s en muchos lugares.",
      code: `// Funci√≥n an√≥nima guardada en variable
variable saludar = funcion(nombre) {
    retornar "¬°Hola " + nombre + "!"
}

mostrar saludar("Ana")
mostrar saludar("Pedro")

// Funci√≥n an√≥nima para c√°lculos
variable calcularDescuento = funcion(precio, porcentaje) {
    retornar precio - (precio * porcentaje / 100)
}

variable precioFinal = calcularDescuento(100, 20)
mostrar "Precio con descuento: " + precioFinal

// Funci√≥n que retorna funci√≥n
variable crearMultiplicador = funcion(factor) {
    retornar funcion(numero) {
        retornar numero * factor
    }
}

variable duplicar = crearMultiplicador(2)
mostrar duplicar(5)`,
      explanation:
        "Las funciones an√≥nimas se crean usando la palabra `funcion` sin nombre, y se guardan en una variable. Luego usamos la variable como si fuera el nombre de la funci√≥n. En `saludar('Ana')`, estamos llamando a la funci√≥n an√≥nima guardada en la variable `saludar`. Las funciones an√≥nimas son especialmente √∫tiles para callbacks, funciones de orden superior (funciones que reciben o retornan otras funciones), y cuando necesitamos funciones peque√±as y espec√≠ficas. En el √∫ltimo ejemplo, `crearMultiplicador` retorna una nueva funci√≥n, creando una closure que 'recuerda' el valor de `factor`.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una funci√≥n an√≥nima `convertirCelsiusAFahrenheit` guardada en una variable, que convierta temperaturas usando la f√≥rmula: (celsius * 9/5) + 32. √ösala para convertir varias temperaturas.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear funciones √∫tiles y ver c√≥mo organizan tu c√≥digo. Las funciones son el coraz√≥n de la programaci√≥n modular: nos permiten dividir problemas grandes en piezas peque√±as y manejables. Experimenta creando funciones para diferentes tareas, combin√°ndolas, y reutiliz√°ndolas.",
      code: `funcion calcularIMC(peso, altura) {
    variable imc = peso / (altura * altura)
    retornar imc
}

variable miIMC = calcularIMC(70, 1.75)
mostrar "Tu IMC es: " + miIMC

funcion esIMCSaludable(imc) {
    retornar imc >= 18.5 y imc <= 24.9
}

mostrar "¬øEs saludable?: " + esIMCSaludable(miIMC)`,
      explanation:
        "En esta pr√°ctica libre, combina todo lo que has aprendido sobre funciones. Crea funciones para tareas espec√≠ficas, usa par√°metros para hacerlas flexibles, retorna valores para usarlos en otras partes del programa, y combina funciones simples para crear l√≥gica m√°s compleja. Las buenas funciones tienen nombres descriptivos, hacen una sola cosa bien, y son f√°ciles de entender y probar. Piensa en las funciones como bloques de construcci√≥n: cada una hace algo espec√≠fico, y al combinarlas puedes crear programas complejos y potentes.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un sistema de gesti√≥n de estudiantes con funciones: `calcularNotaFinal(parcial1, parcial2, final)`, `determinarEstado(nota)` que retorne 'Aprobado' o 'Reprobado', y `mostrarReporte(nombre, nota, estado)` que muestre todo.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ Las funciones encapsulan c√≥digo reutilizable.\n‚Ä¢ Los par√°metros hacen las funciones flexibles.\n‚Ä¢ `retornar` devuelve un valor y termina la funci√≥n.\n‚Ä¢ Las funciones sin retorno ejecutan acciones, las que retornan producen valores.\n‚Ä¢ Las funciones an√≥nimas se guardan en variables.\n‚Ä¢ Divide problemas grandes en funciones peque√±as.\n‚Ä¢ ¬°Las funciones son la base de la programaci√≥n modular!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "‚ö°", text: "Lecci√≥n 7" }}
      title="Funciones en"
      titleGradient=" Hispano Lang"
      description="Aprende a crear c√≥digo reutilizable con funciones"
      steps={steps}
      prevLessonUrl="/lecciones/bucles"
      prevLessonTitle="Bucles"
    />
  );
}
