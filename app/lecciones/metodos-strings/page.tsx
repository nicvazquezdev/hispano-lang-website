import LessonPage from "@/components/lessons/LessonPage";

export default function MetodosStringsLesson() {
  const steps = [
    {
      title: "¬øQu√© son los m√©todos de strings?",
      content:
        "Los m√©todos de strings son funciones especiales que nos permiten manipular y transformar texto. Todo texto (string) en HispanoLang tiene m√©todos incorporados que podemos usar para obtener informaci√≥n sobre el texto o modificarlo de diferentes formas. Es como tener herramientas especializadas para trabajar con palabras y frases.",
      code: `variable saludo = "Hola Mundo"

mostrar saludo
mostrar "Tipo de dato: texto"
mostrar "Tiene m√©todos especiales"`,
      explanation:
        "En HispanoLang, cada cadena de texto (string) tiene m√©todos incorporados que podemos llamar usando la notaci√≥n de punto. Los m√©todos son como funciones que pertenecen al texto y nos permiten hacer operaciones comunes sin tener que escribir c√≥digo complejo. Por ejemplo, en lugar de crear una funci√≥n manual para contar caracteres, simplemente usamos el m√©todo `.longitud()`. Estos m√©todos hacen que trabajar con texto sea mucho m√°s f√°cil y el c√≥digo m√°s expresivo. Son especialmente √∫tiles para validar entrada de usuarios, formatear mensajes, o procesar datos textuales.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una variable con tu frase favorita y mu√©strala. Luego exploraremos los m√©todos disponibles en los siguientes pasos.",
    },
    {
      title: "M√©todo longitud()",
      content:
        "El m√©todo `.longitud()` nos dice cu√°ntos caracteres tiene un string, incluyendo espacios y signos de puntuaci√≥n. Es muy √∫til para validaciones (como verificar que una contrase√±a tenga al menos 8 caracteres), contar palabras, o simplemente obtener informaci√≥n sobre el texto que estamos procesando.",
      code: `variable texto1 = "Hola"
variable texto2 = "Hola mundo"
variable texto3 = "HispanoLang es genial"

mostrar "'" + texto1 + "' tiene " + texto1.longitud() + " caracteres"
mostrar "'" + texto2 + "' tiene " + texto2.longitud() + " caracteres"
mostrar "'" + texto3 + "' tiene " + texto3.longitud() + " caracteres"

variable nombre = "Ana"
si nombre.longitud() < 3 {
    mostrar "Nombre muy corto"
} sino {
    mostrar "Nombre v√°lido"
}`,
      explanation:
        "El m√©todo `.longitud()` cuenta todos los caracteres del string, incluyendo letras, n√∫meros, espacios, y s√≠mbolos de puntuaci√≥n. 'Hola' tiene 4 caracteres, 'Hola mundo' tiene 10 (incluyendo el espacio). Este m√©todo es fundamental para:\n\n‚Ä¢ Validar longitud de contrase√±as o campos de formulario\n‚Ä¢ Limitar la cantidad de caracteres en un mensaje\n‚Ä¢ Verificar que el usuario ingres√≥ informaci√≥n\n‚Ä¢ Calcular cu√°nto espacio ocupar√° el texto\n\nEs importante notar que los espacios cuentan como caracteres. El m√©todo siempre retorna un n√∫mero, que podemos usar en comparaciones, c√°lculos, o mostrar directamente.",
      challenge:
        "üß© Desaf√≠o r√°pido: Pide al usuario su nombre completo. Verifica que tenga al menos 5 caracteres. Si es muy corto, muestra un mensaje de error; si no, muestra cu√°ntos caracteres tiene.",
    },
    {
      title: "M√©todo mayusculas()",
      content:
        "El m√©todo `.mayusculas()` convierte todo el texto a letras may√∫sculas. Es √∫til para formatear t√≠tulos, normalizar datos para comparaciones (evitar problemas con may√∫sculas/min√∫sculas), o crear texto que destaque visualmente. Este m√©todo no modifica el string original, sino que retorna uno nuevo transformado.",
      code: `variable texto = "hola mundo"
variable textoMayusculas = texto.mayusculas()

mostrar "Original: " + texto
mostrar "May√∫sculas: " + textoMayusculas

variable nombre = "ana garc√≠a"
mostrar "Nombre en may√∫sculas: " + nombre.mayusculas()

variable titulo = "bienvenido a hispanolang"
mostrar titulo.mayusculas()`,
      explanation:
        "El m√©todo `.mayusculas()` retorna una nueva cadena con todas las letras convertidas a may√∫sculas. El string original no cambia (los strings son inmutables). En el ejemplo, `texto` sigue siendo 'hola mundo' despu√©s de llamar al m√©todo, pero `textoMayusculas` contiene 'HOLA MUNDO'. Esto es √∫til para:\n\n‚Ä¢ Formatear t√≠tulos o encabezados\n‚Ä¢ Normalizar texto antes de comparar (para que 'ANA' y 'ana' se consideren iguales)\n‚Ä¢ Crear √©nfasis visual en mensajes importantes\n‚Ä¢ Procesar entrada de usuario de forma consistente\n\nPodemos usar el resultado directamente en un `mostrar` o guardarlo en una variable para usarlo despu√©s.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea tres variables con nombres de ciudades en min√∫sculas. Muestra cada una convertida a may√∫sculas, formateando el mensaje como 'CIUDAD: [nombre en may√∫sculas]'.",
    },
    {
      title: "M√©todo minusculas()",
      content:
        "El m√©todo `.minusculas()` convierte todo el texto a letras min√∫sculas. Al igual que `.mayusculas()`, es muy √∫til para normalizar datos y asegurar consistencia en comparaciones. Es especialmente com√∫n en validaciones donde no queremos que las may√∫sculas/min√∫sculas afecten el resultado.",
      code: `variable texto = "HOLA MUNDO"
variable textoMinusculas = texto.minusculas()

mostrar "Original: " + texto
mostrar "Min√∫sculas: " + textoMinusculas

variable email = "USUARIO@EMAIL.COM"
mostrar "Email normalizado: " + email.minusculas()

// Comparaci√≥n case-insensitive
variable respuesta = "SI"
si respuesta.minusculas() == "si" {
    mostrar "Respuesta afirmativa"
}`,
      explanation:
        "El m√©todo `.minusculas()` funciona igual que `.mayusculas()` pero en direcci√≥n opuesta: convierte todas las letras a min√∫sculas. El string original permanece sin cambios. Este m√©todo es especialmente √∫til para:\n\n‚Ä¢ Normalizar emails (usuario@email.com)\n‚Ä¢ Comparaciones case-insensitive (ignorar may√∫sculas/min√∫sculas)\n‚Ä¢ Crear URLs amigables (mi-pagina-web)\n‚Ä¢ Procesar comandos de usuario\n\nEn el ejemplo del final, normalizamos la respuesta a min√∫sculas antes de compararla, as√≠ 'SI', 'Si', 'sI' y 'si' son todas v√°lidas. Este patr√≥n es muy com√∫n en programaci√≥n real: normalizar antes de comparar evita bugs relacionados con diferencias de capitalizaci√≥n.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un programa que pida al usuario un comando ('AYUDA', 'SALIR', 'CONTINUAR'). Normaliza el comando a min√∫sculas y usa condicionales para responder apropiadamente a cada comando.",
    },
    {
      title: "Combinando M√©todos de Strings",
      content:
        "Podemos combinar m√∫ltiples m√©todos de strings para crear transformaciones m√°s complejas. Tambi√©n podemos usar m√©todos junto con otras operaciones como concatenaci√≥n, comparaci√≥n, o almacenamiento en variables. Esta flexibilidad nos permite procesar texto de formas sofisticadas con c√≥digo simple y expresivo.",
      code: `variable mensaje = "   HispanoLang es GENIAL   "

// M√©todos encadenados (uno tras otro)
variable procesado = mensaje.minusculas()

mostrar "Original: '" + mensaje + "'"
mostrar "Procesado: '" + procesado + "'"
mostrar "Longitud original: " + mensaje.longitud()
mostrar "Longitud procesado: " + procesado.longitud()

// Validaci√≥n de entrada
variable password = "MiPassword123"
si password.longitud() >= 8 {
    mostrar "Contrase√±a v√°lida"
    mostrar "En may√∫sculas: " + password.mayusculas()
}`,
      explanation:
        "Podemos combinar m√©todos de strings de m√∫ltiples formas:\n\n‚Ä¢ **Guardar en variables**: Para usar el resultado despu√©s\n‚Ä¢ **Usar en expresiones**: Directamente en concatenaciones o comparaciones\n‚Ä¢ **Combinar con condicionales**: Para validaciones\n‚Ä¢ **Encadenar m√©todos**: Aunque en este ejemplo usamos uno a la vez\n\nLos m√©todos de strings son no-destructivos: el string original nunca cambia. Cada m√©todo retorna un nuevo string transformado. Esto hace que sea seguro experimentar con transformaciones sin preocuparte por perder los datos originales. En aplicaciones reales, estos m√©todos son fundamentales para limpiar y normalizar entrada de usuarios, formatear salida, y procesar datos textuales de forma robusta.",
      challenge:
        "üß© Desaf√≠o r√°pido: Pide al usuario su nombre y apellido. Convierte el nombre a may√∫sculas y el apellido a min√∫sculas. Muestra ambos y la longitud total de caracteres (nombre + apellido).",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear programas que procesen y manipulen texto de formas creativas. Los m√©todos de strings son herramientas fundamentales para trabajar con datos textuales. Comb√≠nalos con todo lo que has aprendido para crear validadores, formateadores, procesadores de texto, y m√°s.",
      code: `variable texto = "HispanoLang"

mostrar "Original: " + texto
mostrar "May√∫sculas: " + texto.mayusculas()
mostrar "Min√∫sculas: " + texto.minusculas()
mostrar "Longitud: " + texto.longitud()

variable esLargo = texto.longitud() > 10
mostrar "¬øEs largo?: " + esLargo`,
      explanation:
        "En esta pr√°ctica libre, experimenta con diferentes m√©todos de strings. Intenta crear validadores de formularios, normalizadores de datos, formateadores de texto, o cualquier programa que procese informaci√≥n textual. Combina m√©todos con condicionales para crear validaciones, con bucles para procesar m√∫ltiples textos, y con funciones para encapsular operaciones de procesamiento. Los m√©todos de strings son la base para crear interfaces de usuario robustas que manejen entrada de usuarios de forma segura y consistente. Piensa en casos de uso reales: validar emails, normalizar nombres, verificar longitudes, o formatear mensajes.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un validador de usuario: pide nombre de usuario y contrase√±a. El usuario debe tener al menos 4 caracteres, la contrase√±a al menos 8. Convierte el usuario a min√∫sculas antes de validar. Muestra si la validaci√≥n pas√≥ o fall√≥.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ `.longitud()` retorna cu√°ntos caracteres tiene el string.\n‚Ä¢ `.mayusculas()` convierte todo a MAY√öSCULAS.\n‚Ä¢ `.minusculas()` convierte todo a min√∫sculas.\n‚Ä¢ Los m√©todos no modifican el string original, retornan uno nuevo.\n‚Ä¢ Combina m√©todos con condicionales para validaciones.\n‚Ä¢ Normaliza texto antes de comparar para evitar bugs.\n‚Ä¢ ¬°Los m√©todos de strings son esenciales para procesar texto!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "üî§", text: "Lecci√≥n 3" }}
      title="M√©todos de Strings en"
      titleGradient=" Hispano Lang"
      description="Aprende a manipular y transformar texto con m√©todos de strings"
      steps={steps}
      prevLessonUrl="/lecciones/tipos-datos"
      prevLessonTitle="Tipos de Datos"
      nextLessonUrl="/lecciones/operadores"
      nextLessonTitle="Operadores"
    />
  );
}
