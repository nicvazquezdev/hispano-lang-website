import LessonPage from "@/components/lessons/LessonPage";

export default function ObjetosLesson() {
  const steps = [
    {
      title: "¬øQu√© son los objetos?",
      content:
        "Los objetos son estructuras que nos permiten agrupar datos relacionados usando nombres descriptivos (propiedades). A diferencia de las listas que usan √≠ndices num√©ricos, los objetos usan claves con nombres. Es como una ficha con campos: en lugar de 'posici√≥n 0, 1, 2', tenemos 'nombre, edad, ciudad'. Los objetos son perfectos para representar entidades del mundo real con m√∫ltiples caracter√≠sticas.",
      code: `variable persona = {
    nombre: "Juan",
    edad: 30,
    ciudad: "Madrid"
}

mostrar persona.nombre
mostrar persona.edad
mostrar persona.ciudad`,
      explanation:
        "Los objetos se crean usando llaves {} y definiendo pares clave:valor separados por comas. Cada propiedad tiene un nombre (clave) y un valor. Para acceder a las propiedades usamos la notaci√≥n de punto: `objeto.propiedad`. Esto es mucho m√°s legible que usar √≠ndices: en lugar de recordar que el nombre est√° en la posici√≥n 0, simplemente accedemos a `persona.nombre`. Los objetos son fundamentales para organizar datos complejos de forma estructurada y significativa. Son la base para modelar entidades como usuarios, productos, configuraciones, o cualquier cosa que tenga m√∫ltiples atributos relacionados.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un objeto `libro` con propiedades para t√≠tulo, autor y a√±o de publicaci√≥n. Luego muestra cada propiedad con un mensaje descriptivo.",
    },
    {
      title: "Acceder y Modificar Propiedades",
      content:
        "Las propiedades de un objeto pueden leerse y modificarse en cualquier momento usando la notaci√≥n de punto. Podemos cambiar valores existentes o agregar nuevas propiedades din√°micamente. Esta flexibilidad hace que los objetos sean muy poderosos para modelar datos que evolucionan durante la ejecuci√≥n del programa.",
      code: `variable estudiante = {
    nombre: "Ana",
    edad: 20,
    carrera: "Inform√°tica"
}

mostrar "Nombre: " + estudiante.nombre
mostrar "Edad: " + estudiante.edad

// Modificar propiedad existente
estudiante.edad = 21
mostrar "Nueva edad: " + estudiante.edad

// Agregar nueva propiedad
estudiante.promedio = 9.5
mostrar "Promedio: " + estudiante.promedio`,
      explanation:
        "Podemos modificar propiedades existentes usando asignaci√≥n: `objeto.propiedad = nuevoValor`. Tambi√©n podemos agregar nuevas propiedades que no exist√≠an cuando creamos el objeto: simplemente asignamos un valor a una propiedad nueva y HispanoLang la crea autom√°ticamente. Esto hace que los objetos sean muy flexibles y din√°micos. En el ejemplo, agregamos la propiedad `promedio` que no exist√≠a originalmente. Esta capacidad es √∫til para extender objetos seg√∫n las necesidades del programa, como agregar campos opcionales o calcular valores derivados que queremos almacenar junto con los datos originales.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un objeto `coche` con marca y modelo. Luego agrega las propiedades a√±o, color y precio. Muestra todas las propiedades al final.",
    },
    {
      title: "Objetos con Diferentes Tipos de Valores",
      content:
        "Las propiedades de un objeto pueden almacenar cualquier tipo de dato: n√∫meros, texto, booleanos, listas, e incluso otros objetos. Esta versatilidad nos permite crear estructuras de datos ricas y complejas que modelen fielmente situaciones del mundo real con toda su complejidad.",
      code: `variable producto = {
    nombre: "Laptop",
    precio: 999.99,
    en_stock: verdadero,
    categorias: ["electr√≥nica", "computadoras"],
    cantidad: 5
}

mostrar "Producto: " + producto.nombre
mostrar "Precio: " + producto.precio
mostrar "¬øEn stock?: " + producto.en_stock
mostrar "Categor√≠as: " + producto.categorias
mostrar "Primera categor√≠a: " + producto.categorias[0]
mostrar "Cantidad disponible: " + producto.cantidad`,
      explanation:
        "En este ejemplo, el objeto `producto` combina diferentes tipos de datos:\n\n‚Ä¢ Texto (nombre)\n‚Ä¢ N√∫mero decimal (precio)\n‚Ä¢ Booleano (en_stock)\n‚Ä¢ Lista (categorias)\n‚Ä¢ N√∫mero entero (cantidad)\n\nPodemos mezclar cualquier tipo de dato en las propiedades de un objeto. Cuando una propiedad es una lista, podemos acceder a sus elementos usando √≠ndices despu√©s del nombre de la propiedad: `producto.categorias[0]`. Esta capacidad de combinar tipos hace que los objetos sean extremadamente vers√°tiles para modelar entidades complejas con m√∫ltiples caracter√≠sticas de diferentes naturalezas.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un objeto `estudiante` con nombre (texto), edad (n√∫mero), materias (lista de 3 materias), y es_becado (booleano). Muestra toda la informaci√≥n de forma organizada.",
    },
    {
      title: "Objetos Anidados",
      content:
        "Los objetos pueden contener otros objetos como propiedades. Esto nos permite crear estructuras jer√°rquicas complejas que representen relaciones y agrupaciones de datos. Es como tener fichas dentro de fichas: cada nivel agrupa informaci√≥n relacionada de forma organizada.",
      code: `variable empresa = {
    nombre: "TechCorp",
    empleados: 150,
    direccion: {
        calle: "Av. Principal 123",
        ciudad: "Madrid",
        codigo_postal: "28001"
    }
}

mostrar "Empresa: " + empresa.nombre
mostrar "Empleados: " + empresa.empleados
mostrar "Calle: " + empresa.direccion.calle
mostrar "Ciudad: " + empresa.direccion.ciudad
mostrar "CP: " + empresa.direccion.codigo_postal`,
      explanation:
        "Los objetos anidados se acceden usando m√∫ltiples puntos: `objeto.subObjeto.propiedad`. En este ejemplo, `direccion` es un objeto completo dentro del objeto `empresa`. Para acceder a la ciudad, usamos `empresa.direccion.ciudad` - primero accedemos a `direccion` y luego a su propiedad `ciudad`. Esta estructura nos permite organizar datos relacionados de forma l√≥gica: toda la informaci√≥n de direcci√≥n est√° agrupada en su propio objeto. Podemos tener m√∫ltiples niveles de anidamiento, creando estructuras tan complejas como necesitemos para modelar nuestros datos.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un objeto `persona` con nombre, edad y un objeto anidado `contacto` que tenga email y tel√©fono. Muestra toda la informaci√≥n accediendo a cada propiedad.",
    },
    {
      title: "Objetos en Listas y Listas en Objetos",
      content:
        "Podemos combinar objetos y listas de formas poderosas: crear listas de objetos o tener listas como propiedades de objetos. Estas combinaciones nos permiten modelar estructuras de datos complejas como bases de datos, sistemas de gesti√≥n, o cualquier aplicaci√≥n que maneje m√∫ltiples entidades con caracter√≠sticas variadas.",
      code: `variable estudiantes = [
    {nombre: "Ana", edad: 20, nota: 95},
    {nombre: "Carlos", edad: 22, nota: 87},
    {nombre: "Mar√≠a", edad: 19, nota: 92}
]

mostrar "Primera estudiante: " + estudiantes[0].nombre
mostrar "Nota de Carlos: " + estudiantes[1].nota

estudiantes.recorrer(funcion(estudiante, indice) {
    mostrar estudiante.nombre + " tiene " + estudiante.nota + " puntos"
})`,
      explanation:
        "Una lista de objetos es extremadamente √∫til para representar colecciones de entidades similares: estudiantes, productos, usuarios, etc. Cada elemento de la lista es un objeto completo con sus propiedades. Para acceder a propiedades espec√≠ficas, combinamos √≠ndices y notaci√≥n de punto: `estudiantes[0].nombre` primero accede al estudiante en la posici√≥n 0, luego a su propiedad nombre. Podemos recorrer la lista de objetos con `.recorrer()` y procesar cada objeto individualmente. Esta combinaci√≥n de listas y objetos es fundamental en programaci√≥n real: casi todas las aplicaciones trabajan con listas de objetos (usuarios, productos, mensajes, etc.).",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea una lista de 3 productos, cada uno con nombre, precio y stock. Recorre la lista y muestra qu√© productos tienen stock > 0. Calcula el valor total del inventario.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear estructuras de datos complejas usando objetos. Los objetos son la forma principal de organizar datos en programaci√≥n moderna. Combina objetos, listas, y todo lo que has aprendido para crear sistemas de informaci√≥n robustos y bien organizados.",
      code: `variable biblioteca = {
    nombre: "Biblioteca Central",
    libros: [
        {titulo: "Don Quijote", autor: "Cervantes"},
        {titulo: "Cien a√±os", autor: "Garc√≠a M√°rquez"}
    ]
}

mostrar "Biblioteca: " + biblioteca.nombre
mostrar "Libros disponibles: " + biblioteca.libros.longitud()

biblioteca.libros.recorrer(funcion(libro) {
    mostrar libro.titulo + " - " + libro.autor
})`,
      explanation:
        "En esta pr√°ctica libre, combina todo lo que has aprendido sobre objetos y listas. Crea estructuras de datos que representen sistemas del mundo real: bibliotecas, tiendas, escuelas, redes sociales, etc. Usa objetos para entidades con m√∫ltiples caracter√≠sticas, listas para colecciones, objetos anidados para relaciones jer√°rquicas, y funciones para procesar estos datos. La clave est√° en pensar claramente c√≥mo organizar tu informaci√≥n: qu√© debe ser un objeto, qu√© debe ser una lista, y c√≥mo relacionarlos. Los buenos dise√±os de datos hacen que el c√≥digo sea m√°s claro, mantenible y f√°cil de extender.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un objeto `restaurante` con nombre, direcci√≥n (objeto anidado con calle y ciudad), y men√∫ (lista de objetos con nombre de plato y precio). Muestra el men√∫ completo con precios.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ Los objetos usan claves con nombres en lugar de √≠ndices num√©ricos.\n‚Ä¢ Accede a propiedades con la notaci√≥n de punto: `objeto.propiedad`.\n‚Ä¢ Puedes modificar y agregar propiedades din√°micamente.\n‚Ä¢ Las propiedades pueden ser de cualquier tipo: n√∫meros, texto, listas, objetos.\n‚Ä¢ Los objetos anidados crean estructuras jer√°rquicas.\n‚Ä¢ Las listas de objetos son perfectas para colecciones de entidades.\n‚Ä¢ ¬°Los objetos son fundamentales para organizar datos complejos!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "üóÇÔ∏è", text: "Lecci√≥n 10" }}
      title="Objetos en"
      titleGradient=" Hispano Lang"
      description="Aprende a organizar datos complejos con objetos"
      steps={steps}
      prevLessonUrl="/lecciones/listas"
      prevLessonTitle="Listas"
      nextLessonUrl="/lecciones/manejo-errores"
      nextLessonTitle="Manejo de Errores"
    />
  );
}
