import LessonPage from "@/components/lessons/LessonPage";

export default function FuncionesMatematicasLesson() {
  const steps = [
    {
      title: "Â¿QuÃ© son las funciones matemÃ¡ticas integradas?",
      content:
        "HispanoLang incluye un conjunto de funciones matemÃ¡ticas predefinidas que estÃ¡n disponibles sin necesidad de crearlas. Estas funciones nos permiten realizar cÃ¡lculos complejos como raÃ­ces cuadradas, potencias, trigonometrÃ­a, y mÃ¡s, con solo llamarlas por su nombre. Son como una calculadora cientÃ­fica integrada en el lenguaje, lista para usar en cualquier momento.",
      code: `variable raiz = raiz(16)
variable potencia = potencia(2, 3)

mostrar "La raÃ­z cuadrada de 16 es: " + raiz
mostrar "2 elevado a la 3 es: " + potencia

variable numero = 25
mostrar "La raÃ­z de " + numero + " es: " + raiz(numero)`,
      explanation:
        "Las funciones matemÃ¡ticas integradas son funciones que HispanoLang proporciona automÃ¡ticamente. No necesitamos definirlas, solo llamarlas con sus nombres. `raiz(16)` calcula la raÃ­z cuadrada de 16 y retorna 4. `potencia(2, 3)` calcula 2Â³ (2 Ã— 2 Ã— 2) y retorna 8. Estas funciones aceptan parÃ¡metros y retornan resultados que podemos guardar en variables o usar directamente. Son fundamentales para crear programas que realicen cÃ¡lculos matemÃ¡ticos complejos sin tener que implementar los algoritmos desde cero.",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Calcula la raÃ­z cuadrada de 144 y 2 elevado a la 5. Muestra ambos resultados con mensajes descriptivos.",
    },
    {
      title: "Funciones TrigonomÃ©tricas",
      content:
        "Las funciones trigonomÃ©tricas (seno, coseno, tangente) son Ãºtiles para cÃ¡lculos de geometrÃ­a, fÃ­sica, animaciones, y grÃ¡ficos. Trabajan con Ã¡ngulos y nos permiten calcular relaciones entre lados de triÃ¡ngulos o crear movimientos circulares. Aunque son avanzadas, HispanoLang las incluye para cÃ¡lculos cientÃ­ficos.",
      code: `variable seno0 = seno(0)
variable coseno0 = coseno(0)
variable tangente0 = tangente(0)

mostrar "Seno de 0: " + seno0
mostrar "Coseno de 0: " + coseno0
mostrar "Tangente de 0: " + tangente0

variable angulo = 90
mostrar "Seno de 90: " + seno(angulo)`,
      explanation:
        "Las funciones trigonomÃ©tricas son:\n\nâ€¢ `seno(angulo)` calcula el seno del Ã¡ngulo\nâ€¢ `coseno(angulo)` calcula el coseno del Ã¡ngulo\nâ€¢ `tangente(angulo)` calcula la tangente del Ã¡ngulo\n\nEstas funciones retornan valores numÃ©ricos que representan las razones trigonomÃ©tricas. seno(0) = 0, coseno(0) = 1, tangente(0) = 0. Aunque parezcan avanzadas, son muy Ãºtiles en programaciÃ³n para crear animaciones, calcular trayectorias, trabajar con grÃ¡ficos, o resolver problemas de geometrÃ­a. No necesitas ser un experto en trigonometrÃ­a para usarlas: solo entender que toman un Ã¡ngulo y retornan un nÃºmero.",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Calcula el seno, coseno y tangente del Ã¡ngulo 45. Muestra los tres resultados organizadamente.",
    },
    {
      title: "Funciones de Redondeo",
      content:
        "Las funciones de redondeo nos permiten convertir nÃºmeros decimales en enteros de diferentes formas. `redondear()` va al entero mÃ¡s cercano, `techo()` siempre redondea hacia arriba, y `piso()` siempre hacia abajo. Son muy Ãºtiles para cÃ¡lculos de dinero, cantidades de productos, o cuando necesitamos nÃºmeros enteros.",
      code: `variable decimal = 3.7

mostrar "NÃºmero original: " + decimal
mostrar "Redondeado: " + redondear(decimal)
mostrar "Techo: " + techo(decimal)
mostrar "Piso: " + piso(decimal)

mostrar "---"

variable precio = 19.99
mostrar "Precio: " + precio
mostrar "Redondeado: " + redondear(precio)

variable medida = 5.2
mostrar "Techo de " + medida + ": " + techo(medida)
mostrar "Piso de " + medida + ": " + piso(medida)`,
      explanation:
        "Las tres funciones de redondeo tienen diferentes comportamientos:\n\nâ€¢ `redondear(3.7)` retorna 4 (mÃ¡s cercano)\nâ€¢ `redondear(3.2)` retorna 3 (mÃ¡s cercano)\nâ€¢ `techo(3.2)` retorna 4 (siempre arriba)\nâ€¢ `piso(3.8)` retorna 3 (siempre abajo)\n\nEstas funciones son muy Ãºtiles en situaciones reales:\n\nâ€¢ Redondear precios para mostrar al usuario\nâ€¢ Calcular cantidad de paquetes necesarios (siempre redondear arriba)\nâ€¢ Trabajar con divisiones que deben dar nÃºmeros enteros\nâ€¢ Convertir medidas a unidades completas\n\n`techo()` es Ãºtil cuando necesitas asegurar que siempre tienes suficiente (ej: paquetes), y `piso()` cuando necesitas el mÃ¡ximo entero que cabe (ej: distribuciÃ³n de recursos).",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Calcula cuÃ¡ntos paquetes de 6 unidades necesitas para 20 unidades (usa divisiÃ³n y techo). Luego muestra cuÃ¡ntas unidades completas tienes en 25.7 (usa piso).",
    },
    {
      title: "Valor Absoluto y Logaritmo",
      content:
        "El valor absoluto convierte nÃºmeros negativos en positivos (la distancia desde cero). El logaritmo es Ãºtil para cÃ¡lculos exponenciales y cientÃ­ficos. Estas funciones son herramientas matemÃ¡ticas especializadas que aparecen en muchos algoritmos y cÃ¡lculos del mundo real.",
      code: `variable negativo = -5
variable positivo = 15

mostrar "Valor absoluto de -5: " + valorAbsoluto(negativo)
mostrar "Valor absoluto de 15: " + valorAbsoluto(positivo)

variable diferencia = valorAbsoluto(10 - 25)
mostrar "Diferencia absoluta: " + diferencia

variable log10 = logaritmo(10)
variable log100 = logaritmo(100)

mostrar "Logaritmo de 10: " + log10
mostrar "Logaritmo de 100: " + log100`,
      explanation:
        "Estas funciones tienen usos especÃ­ficos:\n\nâ€¢ `valorAbsoluto(numero)` retorna el valor sin signo. valorAbsoluto(-5) = 5, valorAbsoluto(5) = 5. Es Ãºtil para calcular distancias, diferencias, o cuando solo importa la magnitud y no la direcciÃ³n.\n\nâ€¢ `logaritmo(numero)` calcula el logaritmo natural del nÃºmero. Es Ãºtil en cÃ¡lculos cientÃ­ficos, crecimiento exponencial, o escalas logarÃ­tmicas.\n\nEl valor absoluto es muy comÃºn: por ejemplo, para calcular la diferencia entre dos nÃºmeros sin importar cuÃ¡l es mayor (|10 - 25| = 15). El logaritmo es mÃ¡s especializado pero importante en campos como finanzas, ciencias, o anÃ¡lisis de datos donde trabajamos con crecimiento exponencial.",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Crea dos variables con nÃºmeros, una positiva y una negativa. Calcula el valor absoluto de ambas y su diferencia absoluta. Muestra todos los resultados.",
    },
    {
      title: "NÃºmeros Aleatorios",
      content:
        "La funciÃ³n `aleatorio()` genera nÃºmeros aleatorios (al azar). Podemos usarla sin parÃ¡metros para obtener un nÃºmero entre 0 y 1, con un parÃ¡metro para establecer el mÃ¡ximo, o con dos parÃ¡metros para definir un rango. Los nÃºmeros aleatorios son fundamentales para juegos, simulaciones, selecciÃ³n aleatoria, o cualquier situaciÃ³n donde necesitemos azar.",
      code: `// Aleatorio entre 0 y 1
variable random1 = aleatorio()
mostrar "Entre 0 y 1: " + random1

// Aleatorio entre 0 y 10
variable random2 = aleatorio(10)
mostrar "Entre 0 y 10: " + random2

// Aleatorio entre 5 y 15
variable random3 = aleatorio(5, 15)
mostrar "Entre 5 y 15: " + random3

// Simular dado (1-6)
variable dado = piso(aleatorio(1, 7))
mostrar "Resultado del dado: " + dado`,
      explanation:
        "La funciÃ³n `aleatorio()` tiene tres formas de uso:\n\nâ€¢ `aleatorio()` â†’ nÃºmero entre 0.0 y 1.0\nâ€¢ `aleatorio(max)` â†’ nÃºmero entre 0.0 y max\nâ€¢ `aleatorio(min, max)` â†’ nÃºmero entre min y max\n\nLos nÃºmeros son decimales. Para obtener enteros, combÃ­nala con `piso()` o `redondear()`. En el ejemplo del dado, usamos `aleatorio(1, 7)` para obtener entre 1.0 y 6.999..., y `piso()` para truncar a enteros (1, 2, 3, 4, 5, 6). Los nÃºmeros aleatorios son esenciales para:\n\nâ€¢ Crear juegos (dados, cartas, enemigos)\nâ€¢ Simulaciones y pruebas\nâ€¢ Seleccionar elementos al azar\nâ€¢ Generar datos de prueba",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Simula tirar dos dados (1-6) y suma sus valores. Luego genera una temperatura aleatoria entre 15 y 35 grados. Muestra ambos resultados.",
    },
    {
      title: "Funciones de AgregaciÃ³n",
      content:
        "Las funciones de agregaciÃ³n procesan mÃºltiples nÃºmeros y retornan un solo resultado. `maximo()` encuentra el mayor, `minimo()` el menor, `suma()` los suma todos, y `promedio()` calcula el promedio. Estas funciones aceptan mÃºltiples argumentos y son muy Ãºtiles para anÃ¡lisis de datos y estadÃ­sticas bÃ¡sicas.",
      code: `variable numeros1 = 10
variable numeros2 = 5
variable numeros3 = 8
variable numeros4 = 3

variable max = maximo(numeros1, numeros2, numeros3, numeros4)
variable min = minimo(numeros1, numeros2, numeros3, numeros4)

mostrar "Mayor: " + max
mostrar "Menor: " + min

variable total = suma(10, 20, 30, 40, 50)
mostrar "Suma total: " + total

variable prom = promedio(8, 9, 7, 10)
mostrar "Promedio: " + prom`,
      explanation:
        "Las funciones de agregaciÃ³n son:\n\nâ€¢ `maximo(n1, n2, ...)` retorna el nÃºmero mÃ¡s grande\nâ€¢ `minimo(n1, n2, ...)` retorna el nÃºmero mÃ¡s pequeÃ±o\nâ€¢ `suma(n1, n2, ...)` retorna la suma de todos\nâ€¢ `promedio(n1, n2, ...)` retorna el promedio aritmÃ©tico\n\nEstas funciones aceptan mÃºltiples argumentos separados por comas. Son muy Ãºtiles para:\n\nâ€¢ Encontrar la calificaciÃ³n mÃ¡s alta/baja\nâ€¢ Calcular totales de ventas o gastos\nâ€¢ Obtener promedios de notas o temperaturas\nâ€¢ AnÃ¡lisis estadÃ­stico bÃ¡sico\n\nPodemos pasarles variables o valores literales, y combinarlas con otras operaciones para crear cÃ¡lculos mÃ¡s complejos. Son especialmente Ãºtiles cuando trabajas con mÃºltiples valores y necesitas informaciÃ³n agregada sobre ellos.",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Tienes 5 calificaciones (85, 92, 78, 95, 88). Calcula y muestra: la nota mÃ¡s alta, la mÃ¡s baja, la suma total y el promedio. Luego determina si el promedio es >= 80 (aprobado con honores).",
    },
    {
      title: "Â¡PrÃ¡ctica libre!",
      content:
        "Ahora es tu turno de crear programas que usen funciones matemÃ¡ticas para resolver problemas reales. Combina diferentes funciones matemÃ¡ticas con todo lo que has aprendido (variables, condicionales, bucles, funciones) para crear calculadoras cientÃ­ficas, simuladores, juegos, o herramientas de anÃ¡lisis de datos.",
      code: `// Calculadora de distancia
variable x1 = 0
variable y1 = 0
variable x2 = 3
variable y2 = 4

variable dx = valorAbsoluto(x2 - x1)
variable dy = valorAbsoluto(y2 - y1)
variable distancia = raiz(potencia(dx, 2) + potencia(dy, 2))

mostrar "Distancia: " + distancia`,
      explanation:
        "En esta prÃ¡ctica libre, combina funciones matemÃ¡ticas para resolver problemas del mundo real. En el ejemplo, calculamos la distancia entre dos puntos usando el teorema de PitÃ¡goras: combinamos `valorAbsoluto()`, `potencia()` y `raiz()` para obtener el resultado. Intenta crear:\n\nâ€¢ Calculadoras cientÃ­ficas con mÃºltiples operaciones\nâ€¢ Juegos con nÃºmeros aleatorios\nâ€¢ Sistemas de calificaciones con promedios\nâ€¢ Simuladores fÃ­sicos con trigonometrÃ­a\nâ€¢ Herramientas de anÃ¡lisis estadÃ­stico\n\nLas funciones matemÃ¡ticas son herramientas poderosas que, combinadas con lÃ³gica de programaciÃ³n, te permiten resolver problemas complejos de forma elegante.",
      challenge:
        "ðŸ§© DesafÃ­o rÃ¡pido: Crea un juego de adivinanza: genera un nÃºmero aleatorio entre 1 y 100. Pide al usuario un nÃºmero. Calcula la diferencia absoluta entre ambos y muestra quÃ© tan cerca estuvo (0-10: muy cerca, 11-30: cerca, 31+: lejos).",
      summary:
        "ðŸ§  Recuerda:\n\nâ€¢ `raiz(n)` calcula la raÃ­z cuadrada.\nâ€¢ `potencia(base, exponente)` eleva un nÃºmero a una potencia.\nâ€¢ `seno()`, `coseno()`, `tangente()` para trigonometrÃ­a.\nâ€¢ `redondear()`, `techo()`, `piso()` para convertir a enteros.\nâ€¢ `valorAbsoluto()` elimina el signo negativo.\nâ€¢ `aleatorio()` genera nÃºmeros al azar.\nâ€¢ `maximo()`, `minimo()`, `suma()`, `promedio()` para agregaciones.\nâ€¢ Â¡Combina estas funciones para cÃ¡lculos poderosos!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "ðŸ”¢", text: "LecciÃ³n 8" }}
      title="Funciones MatemÃ¡ticas en"
      titleGradient=" Hispano Lang"
      description="Aprende a usar funciones matemÃ¡ticas integradas para cÃ¡lculos avanzados"
      steps={steps}
      prevLessonUrl="/lecciones/funciones"
      prevLessonTitle="Funciones"
      nextLessonUrl="/lecciones/listas"
      nextLessonTitle="Listas"
    />
  );
}
