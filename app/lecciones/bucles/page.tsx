import LessonPage from "@/components/lessons/LessonPage";

export default function BuclesLesson() {
  const steps = [
    {
      title: "¬øQu√© son los bucles?",
      content:
        "Los bucles (o ciclos) son estructuras que nos permiten repetir c√≥digo m√∫ltiples veces sin tener que escribirlo una y otra vez. Imagina que necesitas mostrar los n√∫meros del 1 al 100: sin bucles tendr√≠as que escribir 100 l√≠neas de c√≥digo. Con bucles, solo necesitas unas pocas l√≠neas. Los bucles son fundamentales para automatizar tareas repetitivas y procesar grandes cantidades de datos.",
      code: `variable i = 1

mientras i <= 5 {
    mostrar "N√∫mero: " + i
    i = i + 1
}

mostrar "Bucle terminado"`,
      explanation:
        "El bucle `mientras` (while en ingl√©s) repite un bloque de c√≥digo mientras una condici√≥n sea verdadera. En este ejemplo:\n\n1. Comenzamos con i = 1\n2. Verificamos: ¬øi <= 5? S√≠ ‚Üí ejecutamos el bloque\n3. Mostramos el n√∫mero e incrementamos i a 2\n4. Volvemos al paso 2 y repetimos\n5. Cuando i llega a 6, la condici√≥n es falsa y salimos del bucle\n\nEs crucial incrementar la variable (i = i + 1) o el bucle se repetir√≠a infinitamente. El mensaje 'Bucle terminado' se muestra solo una vez, despu√©s de que el bucle termina. Los bucles son la base de la automatizaci√≥n en programaci√≥n.",
      challenge:
        "üß© Desaf√≠o r√°pido: Usa un bucle `mientras` para mostrar los n√∫meros del 10 al 1 en cuenta regresiva. No olvides decrementar la variable en cada iteraci√≥n.",
    },
    {
      title: "Bucle Mientras (While)",
      content:
        "El bucle `mientras` es perfecto cuando no sabemos exactamente cu√°ntas veces se repetir√° el c√≥digo, solo sabemos la condici√≥n que debe cumplirse. Es como decir 'mientras tengas hambre, sigue comiendo'. El bucle contin√∫a hasta que la condici√≥n se vuelva falsa.",
      code: `variable contador = 0
variable suma = 0

mientras contador < 5 {
    contador = contador + 1
    suma = suma + contador
    mostrar "Iteraci√≥n " + contador + ", suma parcial: " + suma
}

mostrar "Suma total: " + suma`,
      explanation:
        "Este ejemplo muestra un patr√≥n com√∫n: usar un bucle para acumular valores. Comenzamos con un contador en 0 y una suma en 0. En cada iteraci√≥n:\n\n1. Incrementamos el contador\n2. Sumamos el contador a la suma total\n3. Mostramos el progreso\n\nCuando el contador llega a 5, la condici√≥n `contador < 5` se vuelve falsa y salimos del bucle. La suma final es 1+2+3+4+5 = 15. Los bucles `mientras` son ideales para procesar datos hasta que se cumpla una condici√≥n espec√≠fica, como leer archivos hasta el final, o validar entrada hasta que sea correcta.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un bucle que calcule el factorial de 5 (5! = 5 √ó 4 √ó 3 √ó 2 √ó 1). Usa una variable para acumular el producto y otra como contador.",
    },
    {
      title: "Bucle Para (For)",
      content:
        "El bucle `para` es ideal cuando sabemos exactamente cu√°ntas veces queremos repetir algo. Combina en una sola l√≠nea la inicializaci√≥n, la condici√≥n y el incremento. Es m√°s compacto y claro para iteraciones con contador. Es como decir 'para cada n√∫mero del 1 al 10, haz esto'.",
      code: `para (variable i = 1; i <= 5; i = i + 1) {
    mostrar "Iteraci√≥n n√∫mero: " + i
}

mostrar "---"

para (variable j = 0; j < 3; j = j + 1) {
    mostrar "Valor de j: " + j
}`,
      explanation:
        "La estructura del bucle `para` tiene tres partes separadas por punto y coma:\n\n1. **Inicializaci√≥n** (variable i = 1): Se ejecuta una sola vez al inicio\n2. **Condici√≥n** (i <= 5): Se verifica antes de cada iteraci√≥n\n3. **Incremento** (i = i + 1): Se ejecuta al final de cada iteraci√≥n\n\nEsto hace que el bucle `para` sea muy compacto: todo el control del bucle est√° en una sola l√≠nea. Es especialmente √∫til cuando trabajamos con rangos num√©ricos conocidos. El primer bucle se ejecuta 5 veces (i: 1,2,3,4,5) y el segundo 3 veces (j: 0,1,2). Nota que podemos usar diferentes nombres de variable en diferentes bucles.",
      challenge:
        "üß© Desaf√≠o r√°pido: Usa un bucle `para` para crear una tabla de multiplicar del 7. Muestra '7 x 1 = 7', '7 x 2 = 14', etc., hasta 7 x 10.",
    },
    {
      title: "Control de Bucles: Continuar y Romper",
      content:
        "A veces necesitamos m√°s control sobre nuestros bucles. `continuar` salta a la siguiente iteraci√≥n sin ejecutar el resto del c√≥digo, y `romper` termina el bucle inmediatamente. Son como atajos que nos permiten manejar casos especiales sin complicar la l√≥gica.",
      code: `// Ejemplo con continuar
para (variable i = 1; i <= 10; i = i + 1) {
    si i == 5 {
        continuar
    }
    mostrar i
}

mostrar "---"

// Ejemplo con romper
variable contador = 0
mientras contador < 10 {
    contador = contador + 1
    si contador == 3 {
        romper
    }
    mostrar "Contador: " + contador
}`,
      explanation:
        "`continuar` y `romper` nos dan control fino sobre la ejecuci√≥n del bucle:\n\n‚Ä¢ **continuar**: Salta el resto de la iteraci√≥n actual y va directo a la siguiente. En el primer ejemplo, cuando i es 5, se salta el `mostrar`, por eso se muestran 1,2,3,4,6,7,8,9,10 (falta el 5).\n\n‚Ä¢ **romper**: Termina el bucle completamente, sin importar la condici√≥n. En el segundo ejemplo, aunque la condici√≥n dice `< 10`, cuando el contador llega a 3, el bucle se rompe y termina.\n\nEstas palabras clave son √∫tiles para manejar casos especiales (continuar) o para salir temprano cuando encontramos lo que buscamos (romper). Sin embargo, deben usarse con cuidado para no hacer el c√≥digo confuso.",
      challenge:
        "üß© Desaf√≠o r√°pido: Usa un bucle del 1 al 20. Salta (continuar) los m√∫ltiplos de 3, y detente (romper) cuando llegues a 15. Muestra solo los n√∫meros que cumplen las condiciones.",
    },
    {
      title: "Bucles Anidados",
      content:
        "Podemos poner bucles dentro de otros bucles para crear patrones m√°s complejos. Es como tener un bucle que se repite, y dentro de cada repetici√≥n, otro bucle que tambi√©n se repite. Esto es √∫til para trabajar con tablas, matrices, o crear patrones bidimensionales.",
      code: `para (variable i = 1; i <= 3; i = i + 1) {
    mostrar "--- Fila " + i + " ---"
    
    para (variable j = 1; j <= 4; j = j + 1) {
        mostrar "  i=" + i + ", j=" + j
    }
}`,
      explanation:
        "En un bucle anidado, el bucle interno se ejecuta completamente por cada iteraci√≥n del bucle externo. En este ejemplo:\n\n1. i = 1, entramos al primer bucle\n2. El bucle de j se ejecuta 4 veces (j: 1,2,3,4)\n3. Volvemos al bucle de i, ahora i = 2\n4. El bucle de j se ejecuta otras 4 veces\n5. Y as√≠ sucesivamente...\n\nTotal de iteraciones: 3 √ó 4 = 12. Los bucles anidados son poderosos pero pueden ser costosos en t√©rminos de rendimiento: si tienes un bucle de 100 iteraciones dentro de otro de 100, ¬°tendr√°s 10,000 iteraciones en total! √ösalos cuando realmente necesites procesar datos bidimensionales o crear patrones complejos.",
      challenge:
        "üß© Desaf√≠o r√°pido: Usa bucles anidados para crear una tabla de multiplicar del 1 al 5. El bucle externo para las filas (1-5) y el interno para las columnas (1-5). Muestra cada multiplicaci√≥n.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear programas que automaticen tareas con bucles. Los bucles son una de las herramientas m√°s poderosas en programaci√≥n: te permiten procesar listas, crear patrones, validar datos, y mucho m√°s. Experimenta con diferentes tipos de bucles y combinaciones.",
      code: `// Suma de n√∫meros del 1 al 10
variable suma = 0

para (variable i = 1; i <= 10; i = i + 1) {
    suma = suma + i
}

mostrar "La suma de 1 a 10 es: " + suma`,
      explanation:
        "En esta pr√°ctica libre experimenta con diferentes aplicaciones de bucles. Intenta crear contadores, acumuladores, validadores, generadores de patrones, o cualquier tarea repetitiva. La clave est√° en identificar qu√© debe repetirse y cu√°ndo debe detenerse. Usa `mientras` cuando la condici√≥n sea m√°s importante que el n√∫mero de iteraciones, y `para` cuando sepas exactamente cu√°ntas veces repetir. No olvides que los bucles infinitos (que nunca terminan) bloquear√°n tu programa, as√≠ que siempre aseg√∫rate de que la condici√≥n pueda volverse falsa o de tener un `romper` como salida de emergencia.",
      challenge:
        "üß© Desaf√≠o r√°pido: Crea un programa que encuentre todos los n√∫meros pares entre 1 y 50 y los sume. Muestra tanto los n√∫meros pares encontrados como la suma total al final.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ Los bucles `mientras` repiten c√≥digo mientras una condici√≥n sea verdadera.\n‚Ä¢ Los bucles `para` son ideales cuando conoces el n√∫mero de iteraciones.\n‚Ä¢ `continuar` salta a la siguiente iteraci√≥n.\n‚Ä¢ `romper` termina el bucle inmediatamente.\n‚Ä¢ Los bucles anidados multiplican las iteraciones.\n‚Ä¢ Siempre aseg√∫rate de que tus bucles puedan terminar.\n‚Ä¢ ¬°Los bucles son fundamentales para automatizar tareas!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "üîÑ", text: "Lecci√≥n 6" }}
      title="Bucles en"
      titleGradient=" Hispano Lang"
      description="Aprende a automatizar tareas repetitivas con bucles mientras y para"
      steps={steps}
      prevLessonUrl="/lecciones/condicionales"
      prevLessonTitle="Condicionales"
      nextLessonUrl="/lecciones/control-flujo-bucles"
      nextLessonTitle="Control de Flujo en Bucles"
    />
  );
}
