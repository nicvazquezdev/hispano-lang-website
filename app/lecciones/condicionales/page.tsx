import LessonPage from "@/components/lessons/LessonPage";

export default function CondicionalesLesson() {
  const steps = [
    {
      title: "¬øQu√© son los condicionales?",
      content:
        "Los condicionales son estructuras que permiten a nuestros programas tomar decisiones. En la vida real tomamos decisiones constantemente: 'si hace fr√≠o, me pongo abrigo', 'si tengo hambre, como algo'. En programaci√≥n, los condicionales nos permiten crear esta misma l√≥gica: ejecutar c√≥digo solo cuando se cumple cierta condici√≥n. Son fundamentales para crear programas inteligentes que se adapten a diferentes situaciones.",
      code: `variable edad = 18

si edad >= 18 {
    mostrar "Eres mayor de edad"
}

mostrar "Programa terminado"`,
      explanation:
        "La estructura b√°sica del condicional usa la palabra `si` seguida de una condici√≥n entre par√©ntesis impl√≠citos y llaves {}. Si la condici√≥n es verdadera, se ejecuta el c√≥digo dentro de las llaves. Si es falsa, se salta ese bloque y el programa contin√∫a. En este ejemplo, verificamos si la edad es mayor o igual a 18. Como es verdadero, se muestra 'Eres mayor de edad'. El mensaje 'Programa terminado' se muestra siempre, sin importar la condici√≥n. Los condicionales son la base de la l√≥gica de programaci√≥n: permiten que el programa reaccione de forma diferente seg√∫n los datos.",
      challenge:
        "Crea una variable con tu edad y usa un condicional `si` para mostrar un mensaje solo si eres mayor de 21 a√±os.",
    },
    {
      title: "Condicional Si-Sino (If-Else)",
      content:
        "Muchas veces necesitamos hacer una cosa si se cumple una condici√≥n, y otra cosa diferente si no se cumple. Para esto usamos `si-sino`. Es como tener un plan A y un plan B: 'si llueve, me quedo en casa, sino voy al parque'. Esta estructura nos permite cubrir ambos casos de forma clara y organizada.",
      code: `variable edad = 15

si edad >= 18 {
    mostrar "Eres mayor de edad"
    mostrar "Puedes votar"
} sino {
    mostrar "Eres menor de edad"
    mostrar "A√∫n no puedes votar"
}

mostrar "Gracias por usar el programa"`,
      explanation:
        "La estructura `si-sino` tiene dos bloques de c√≥digo: uno se ejecuta si la condici√≥n es verdadera, el otro si es falsa. Es importante entender que SIEMPRE se ejecuta exactamente uno de los dos bloques, nunca ambos y nunca ninguno. En este ejemplo, como la edad es 15 (menor que 18), se ejecuta el bloque `sino`, mostrando 'Eres menor de edad' y 'A√∫n no puedes votar'. El √∫ltimo `mostrar` est√° fuera de la estructura condicional, por lo que siempre se ejecuta. Esta estructura es perfecta cuando necesitamos manejar dos caminos mutuamente excluyentes.",
      challenge:
        "Pide un n√∫mero al usuario y usa `si-sino` para mostrar si es par o impar. Pista: usa el operador m√≥dulo (%) para verificar si el resto de dividir entre 2 es 0.",
    },
    {
      title: "Condicionales Anidados",
      content:
        "A veces necesitamos evaluar m√∫ltiples condiciones en secuencia. Podemos anidar condicionales (poner un `si` dentro de otro) para crear l√≥gica m√°s compleja. Es como tomar decisiones paso a paso: primero preguntamos una cosa, y seg√∫n la respuesta, preguntamos otra cosa diferente.",
      code: `variable edad = 25
variable tiene_licencia = verdadero

si edad >= 18 {
    mostrar "Eres mayor de edad"
    
    si tiene_licencia {
        mostrar "Puedes conducir"
    } sino {
        mostrar "Necesitas obtener tu licencia"
    }
} sino {
    mostrar "Eres menor de edad"
    mostrar "No puedes conducir a√∫n"
}`,
      explanation:
        "Los condicionales anidados nos permiten crear √°rboles de decisiones complejos. En este ejemplo, primero verificamos si la persona es mayor de edad. Solo si es verdadero, entramos al primer bloque y entonces verificamos si tiene licencia. Si es menor de edad, entramos directamente al bloque `sino` sin verificar la licencia (porque no importa si la tiene o no, igualmente no puede conducir). Es crucial mantener una buena indentaci√≥n (espacios al inicio de cada l√≠nea) para que el c√≥digo sea legible y entender claramente qu√© condiciones dependen de cu√°les. Los anidamientos son muy potentes pero deben usarse con cuidado para no crear c√≥digo confuso.",
      challenge:
        "Crea un programa que eval√∫e si un estudiante aprob√≥. Si la nota es >= 70, aprob√≥. Si aprob√≥ Y la nota es >= 90, adem√°s muestra '¬°Excelente!'. Si no aprob√≥, muestra 'Debes estudiar m√°s'.",
    },
    {
      title: "Cadenas de Condiciones (Elif)",
      content:
        "Cuando necesitamos evaluar m√∫ltiples condiciones en secuencia, pero solo una debe ejecutarse, usamos cadenas de `si-sino-si`. Esto es m√°s claro que anidar muchos condicionales. Es como tener m√∫ltiples opciones: 'si hace mucho calor ‚Üí playa, sino si hace calor ‚Üí parque, sino si hace fr√≠o ‚Üí cine'.",
      code: `variable nota = 85

si nota >= 90 {
    mostrar "Calificaci√≥n: A - Excelente"
} sino {
    si nota >= 80 {
        mostrar "Calificaci√≥n: B - Muy bien"
    } sino {
        si nota >= 70 {
            mostrar "Calificaci√≥n: C - Bien"
        } sino {
            mostrar "Calificaci√≥n: F - Reprobado"
        }
    }
}`,
      explanation:
        "Esta estructura eval√∫a condiciones en orden hasta que encuentra una verdadera. En este ejemplo, con nota = 85:\n\n1. ¬ønota >= 90? No, contin√∫a\n2. ¬ønota >= 80? S√≠! Ejecuta este bloque y termina\n\nNo eval√∫a las condiciones restantes porque ya encontr√≥ una verdadera. Esto es m√°s eficiente que evaluar todas las condiciones. Cada bloque `sino-si` solo se eval√∫a si todas las condiciones anteriores fueron falsas. Esta estructura es ideal para categorizar valores en rangos o evaluar m√∫ltiples casos mutuamente excluyentes. Es importante ordenar las condiciones de m√°s restrictiva a menos restrictiva para que funcione correctamente.",
      challenge:
        "Crea un programa que categorice la temperatura: si >= 30 'Hace mucho calor', si >= 20 'Clima agradable', si >= 10 'Hace fresco', sino 'Hace fr√≠o'.",
    },
    {
      title: "Condiciones Complejas",
      content:
        "Podemos combinar m√∫ltiples condiciones usando operadores l√≥gicos (y, o, !) para crear evaluaciones m√°s sofisticadas. Esto nos permite verificar m√∫ltiples requisitos al mismo tiempo sin necesidad de anidar condicionales. Es como tener reglas compuestas: 'puedes entrar si tienes entrada Y eres mayor de edad'.",
      code: `variable edad = 25
variable tiene_entrada = verdadero
variable es_vip = falso

si edad >= 18 y tiene_entrada {
    mostrar "¬°Bienvenido al evento!"
    
    si es_vip {
        mostrar "Acceso VIP activado"
    }
} sino {
    si edad < 18 {
        mostrar "Lo sentimos, eres menor de edad"
    } sino {
        mostrar "Necesitas comprar una entrada"
    }
}`,
      explanation:
        "Los operadores l√≥gicos nos permiten combinar condiciones:\n\n‚Ä¢ `y` (AND): Todas las condiciones deben ser verdaderas\n‚Ä¢ `o` (OR): Al menos una condici√≥n debe ser verdadera\n‚Ä¢ `!` (NOT): Invierte una condici√≥n\n\nEn este ejemplo, usamos `edad >= 18 y tiene_entrada` para verificar dos cosas simult√°neamente. Ambas deben ser verdaderas para entrar al evento. Luego, dentro de ese bloque, verificamos si es VIP para darle privilegios adicionales. Estas condiciones complejas nos permiten modelar reglas del mundo real de forma precisa sin crear estructuras de c√≥digo complicadas. Es importante usar par√©ntesis cuando combinamos muchas condiciones para hacer el c√≥digo m√°s claro.",
      challenge:
        "Simula un sistema de login: el usuario puede entrar si (el nombre es 'admin' Y la contrase√±a es '1234') O (es_invitado es verdadero). Muestra mensajes apropiados.",
    },
    {
      title: "¬°Pr√°ctica libre!",
      content:
        "Ahora es tu turno de crear programas que tomen decisiones complejas. Combina condicionales simples, anidados y con m√∫ltiples condiciones para resolver problemas del mundo real. Los condicionales son el coraz√≥n de la l√≥gica de programaci√≥n: domin√°ndolos puedes crear programas verdaderamente inteligentes.",
      code: `variable temperatura = 25

si temperatura > 30 {
    mostrar "Hace mucho calor"
} sino {
    si temperatura > 20 {
        mostrar "Clima agradable"
    } sino {
        mostrar "Hace fr√≠o"
    }
}`,
      explanation:
        "En esta pr√°ctica libre experimenta con diferentes tipos de condicionales. Intenta crear sistemas de validaci√≥n, calculadoras que manejen casos especiales, juegos con diferentes caminos, o cualquier programa que necesite tomar decisiones. La clave est√° en pensar claramente qu√© condiciones necesitas evaluar y en qu√© orden. Usa condicionales simples cuando solo necesites un camino opcional, `si-sino` cuando tengas dos caminos, y cadenas de condiciones cuando tengas m√∫ltiples categor√≠as. Recuerda que la claridad es m√°s importante que la complejidad: es mejor tener varios condicionales simples que uno muy complicado.",
      challenge:
        "Crea una calculadora de descuentos: si la compra es >= 100, descuento del 20%. Si es >= 50, descuento del 10%. Sino, sin descuento. Calcula y muestra el precio final.",
      summary:
        "üß† Recuerda:\n\n‚Ä¢ `si` ejecuta c√≥digo solo cuando la condici√≥n es verdadera.\n‚Ä¢ `si-sino` cubre dos caminos mutuamente excluyentes.\n‚Ä¢ Puedes anidar condicionales para l√≥gica compleja.\n‚Ä¢ Las cadenas `si-sino-si` eval√∫an m√∫ltiples casos en orden.\n‚Ä¢ Usa operadores l√≥gicos (y, o, !) para combinar condiciones.\n‚Ä¢ La indentaci√≥n es crucial para la legibilidad.\n‚Ä¢ ¬°Los condicionales son el cerebro de tus programas!",
    },
  ];

  return (
    <LessonPage
      badge={{ emoji: "ü§î", text: "Lecci√≥n 6" }}
      title="Condicionales en"
      titleGradient=" HispanoLang"
      description="Aprende a tomar decisiones en tus programas con estructuras condicionales"
      steps={steps}
      prevLessonUrl="/lecciones/operadores"
      prevLessonTitle="Operadores"
      nextLessonUrl="/lecciones/bucles"
      nextLessonTitle="Bucles"
    />
  );
}
