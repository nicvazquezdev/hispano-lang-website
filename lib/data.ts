export const docsData = {
  variables: {
    title: "ðŸ“¦ Variables",
    description:
      "Las variables son contenedores que almacenan datos que puedes usar y modificar durante la ejecuciÃ³n de tu programa. Son fundamentales para cualquier programa ya que te permiten guardar informaciÃ³n, realizar cÃ¡lculos, y mantener el estado de tu aplicaciÃ³n.",
    subsections: [
      {
        title: "DeclaraciÃ³n de Variables",
        description:
          "En HispanoLang, usamos la palabra clave 'variable' seguida del nombre que queremos darle y el valor inicial. Puedes declarar variables de cualquier tipo: nÃºmeros, texto, booleanos, listas, objetos, o valores especiales.",
        syntax: "variable nombreVariable = valor",
        code: `variable nombre = "Juan"
variable edad = 25
variable activo = verdadero
variable salario = 50000.50
variable valorNulo = nulo
variable valorIndefinido = indefinido`,
        notes: [
          "El nombre de la variable puede contener letras (a-z, A-Z), nÃºmeros (0-9) y guiones bajos (_)",
          "Debe comenzar con una letra o guion bajo, no puede empezar con un nÃºmero",
          "Los nombres son sensibles a mayÃºsculas/minÃºsculas: 'edad' y 'Edad' son variables diferentes",
          "Se recomienda usar nombres descriptivos que indiquen quÃ© almacena la variable",
          "Usa snake_case (mi_variable) o camelCase (miVariable) para nombres con mÃºltiples palabras",
        ],
      },
      {
        title: "ReasignaciÃ³n de Variables",
        description:
          "Puedes cambiar el valor de una variable en cualquier momento usando el operador de asignaciÃ³n (=). Esto sobrescribe el valor anterior con el nuevo valor. La variable mantiene su nombre pero cambia su contenido.",
        code: `variable contador = 0
mostrar contador  // 0

contador = 5
mostrar contador  // 5

contador = contador + 1
mostrar contador  // 6`,
        notes: [
          "La reasignaciÃ³n usa el mismo operador = que la declaraciÃ³n inicial",
          "No necesitas la palabra 'variable' al reasignar, solo al declarar por primera vez",
          "Puedes usar el valor actual de la variable en la expresiÃ³n de reasignaciÃ³n (ej: contador = contador + 1)",
          "El tipo de dato puede cambiar: una variable que era nÃºmero puede convertirse en texto",
        ],
      },
      {
        title: "Alcance de Variables",
        description:
          "Las variables declaradas dentro de funciones o bloques son locales a ese contexto. Las variables declaradas fuera son globales y accesibles desde cualquier parte del programa.",
        code: `variable global = "Soy global"

funcion miFuncion() {
    variable local = "Soy local"
    mostrar global  // Funciona: acceso a variable global
    mostrar local   // Funciona: acceso a variable local
}

miFuncion()
mostrar global  // Funciona: variable global
// mostrar local  // Error: 'local' no existe aquÃ­`,
      },
    ],
  },
  comentarios: {
    title: "ðŸ’­ Comentarios",
    description:
      "Los comentarios son lÃ­neas de texto que el intÃ©rprete ignora completamente. Sirven para documentar tu cÃ³digo, escribir notas, o desactivar lÃ­neas temporalmente.",
    subsections: [
      {
        title: "Sintaxis de Comentarios",
        description:
          "Los comentarios en HispanoLang empiezan con dos barras diagonales (//) y continÃºan hasta el final de la lÃ­nea.",
        syntax: "// Este es un comentario",
        code: `// Este es un comentario
variable x = 10
mostrar x  // Comentario al final de la lÃ­nea`,
        notes: [
          "Los comentarios empiezan con //",
          "Todo despuÃ©s de // en esa lÃ­nea es ignorado",
          "Puedes poner comentarios en su propia lÃ­nea o al final de cÃ³digo",
          "Los comentarios no afectan la ejecuciÃ³n del programa",
        ],
      },
      {
        title: "Usos de Comentarios",
        description:
          "Los comentarios tienen mÃºltiples propÃ³sitos: explicar cÃ³digo, documentar decisiones, dejar recordatorios, o desactivar cÃ³digo temporalmente.",
        code: `// Programa: Calculadora de descuento
// Autor: Tu nombre

variable precio = 100
// Aplicamos 20% de descuento
variable descuento = precio * 0.20
variable precioFinal = precio - descuento

// mostrar "Debug: precio = " + precio  // CÃ³digo comentado
mostrar "Precio final: " + precioFinal`,
        notes: [
          "Usa comentarios para explicar el 'por quÃ©', no solo el 'quÃ©'",
          "Comenta cÃ³digo para desactivarlo sin borrarlo",
          "Documenta decisiones importantes o algoritmos complejos",
          "Evita comentarios obvios que repiten lo que el cÃ³digo ya dice",
        ],
      },
    ],
  },
  tiposDatos: {
    title: "ðŸ”¢ Tipos de Datos",
    description:
      "HispanoLang soporta mÃºltiples tipos de datos bÃ¡sicos: nÃºmeros, cadenas de texto, booleanos y valores especiales. Cada tipo tiene sus propias caracterÃ­sticas y operaciones permitidas.",
    subsections: [
      {
        title: "NÃºmeros",
        description:
          "Los nÃºmeros pueden ser enteros (sin decimales) o decimales (con punto flotante). TambiÃ©n pueden ser positivos o negativos. No necesitan comillas y se pueden usar en operaciones matemÃ¡ticas directamente.",
        code: `variable entero = 42
variable decimal = 3.14
variable negativo = -10
variable grande = 1000000

// Operaciones matemÃ¡ticas
variable suma = entero + decimal  // 45.14
variable producto = entero * 2    // 84
variable division = entero / 2    // 21`,
        notes: [
          "Los nÃºmeros no llevan comillas",
          "Usa punto (.) para decimales, no coma",
          "Los nÃºmeros pueden ser tan grandes o pequeÃ±os como necesites",
          "Puedes mezclar enteros y decimales en operaciones",
          "Soporta notaciÃ³n cientÃ­fica para nÃºmeros muy grandes o pequeÃ±os",
        ],
      },
      {
        title: "Cadenas de Texto (Strings)",
        description:
          "Las cadenas de texto representan palabras, frases o cualquier secuencia de caracteres. Deben ir siempre entre comillas dobles (\") o simples ('). Puedes usar el operador + para concatenar (unir) cadenas.",
        code: `variable saludo = "Hola mundo"
variable nombre = 'Juan'
variable apellido = "GarcÃ­a"

// ConcatenaciÃ³n
variable nombreCompleto = nombre + " " + apellido
mostrar nombreCompleto  // "Juan GarcÃ­a"

// Mezclar con nÃºmeros
variable edad = 25
variable mensaje = nombre + " tiene " + edad + " aÃ±os"

// MÃ©todos de strings
mostrar saludo.longitud()      // 10
mostrar saludo.mayusculas()   // "HOLA MUNDO"
mostrar saludo.minusculas()   // "hola mundo"`,
        notes: [
          "Las cadenas siempre van entre comillas (dobles \" o simples ')",
          "El operador + concatena (une) cadenas de texto",
          "Cuando concatenas texto con nÃºmeros, el nÃºmero se convierte automÃ¡ticamente a texto",
          "MÃ©todos disponibles: .longitud(), .mayusculas(), .minusculas()",
          "Usa comillas dobles preferentemente para consistencia",
        ],
      },
      {
        title: "Booleanos",
        description:
          "Los valores booleanos solo pueden ser verdadero o falso. Se usan para representar estados lÃ³gicos, condiciones, o respuestas de sÃ­/no. Son fundamentales para condicionales y lÃ³gica de programaciÃ³n.",
        code: `variable activo = verdadero
variable inactivo = falso

// Uso en condicionales
si activo {
    mostrar "El sistema estÃ¡ activo"
}

// Resultado de comparaciones
variable esMayor = 10 > 5      // verdadero
variable esIgual = 5 == 5      // verdadero
variable esDiferente = 5 != 3  // verdadero

// Operadores lÃ³gicos
variable ambos = verdadero y falso  // falso
variable alguno = verdadero o falso  // verdadero
variable negacion = !verdadero       // falso`,
        notes: [
          "Solo hay dos valores booleanos: verdadero y falso",
          "No usan comillas, son palabras clave del lenguaje",
          "Los operadores de comparaciÃ³n (>, <, ==, !=, >=, <=) retornan booleanos",
          "Los operadores lÃ³gicos (y, o, !) trabajan con booleanos",
          "En HispanoLang usamos 'verdadero' y 'falso' en espaÃ±ol",
        ],
      },
      {
        title: "Valores Especiales: nulo e indefinido",
        description:
          "HispanoLang tiene dos valores especiales para representar la ausencia de valor. 'nulo' indica que intencionalmente no hay valor, mientras que 'indefinido' indica que algo no ha sido inicializado o no existe.",
        code: `variable sinValor = nulo
variable noDefinido = indefinido

// Uso comÃºn: campos opcionales
variable telefono = nulo  // No tiene telÃ©fono

// Verificar valores especiales
si telefono == nulo {
    mostrar "No hay telÃ©fono registrado"
}

// Diferencia entre nulo e indefinido
variable email = nulo        // Intencionalmente vacÃ­o
variable direccion           // indefinido (no asignado)`,
        notes: [
          "'nulo' se usa cuando intencionalmente no hay valor (campo opcional vacÃ­o)",
          "'indefinido' indica que algo no ha sido definido o inicializado",
          "Ambos son diferentes de 0, '' (cadena vacÃ­a), o falso",
          "Son Ãºtiles para validaciones y manejo de datos opcionales",
          "Usa 'nulo' cuando explÃ­citamente quieres indicar ausencia de valor",
        ],
      },
    ],
  },
};
